<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://alfolio.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://alfolio.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-08-30T00:25:41+00:00</updated><id>https://alfolio.github.io/feed.xml</id><title type="html">blank</title><subtitle>Aniket Rajnish - Portfolio Website </subtitle><entry><title type="html">Image Editor using Unity</title><link href="https://alfolio.github.io/docs/2023/unity-image-editor/" rel="alternate" type="text/html" title="Image Editor using Unity"/><published>2023-08-17T11:00:00+00:00</published><updated>2023-08-17T11:00:00+00:00</updated><id>https://alfolio.github.io/docs/2023/unity-image-editor</id><content type="html" xml:base="https://alfolio.github.io/docs/2023/unity-image-editor/"><![CDATA[<p>I was recently accepted into the Florida Interactive Entertainment Academy for the Technical Art track. I was checking out some medium blogs to to learn some image manipulation to brush up some of my technical art skils. Them medium gods were actually pretty darn helpful and I somehow ended up developing a janky photo editor using Unity. It transforms any regular image into a “low-quality-meme”. I call it the “Low Res Meme Editor”. I’ll be discussing my approach towards developing the photo editor in this blog.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Icon_Editor-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Icon_Editor-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Icon_Editor-1400.webp"/> <img src="/assets/img/Icon_Editor.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Janky Icon for a Janky Photo Editor" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Janky Icon for a Janky Photo Editor </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Editor_UI-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Editor_UI-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Editor_UI-1400.webp"/> <img src="/assets/img/Editor_UI.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="The Editor UI" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The Editor UI </div> </div> </div> <h2 id="10-preparing-images-for-editing"><strong>1.0 Preparing Images for Editing</strong></h2> <p>The first step was transforming the images into a suitable format for easy manipulation. <code class="language-plaintext highlighter-rouge">Texture2D</code> felt appopriate for this purpose, as it gives me more control over the pixel data. I could directly manipulate pixel values using the <code class="language-plaintext highlighter-rouge">GetPixel()</code> and <code class="language-plaintext highlighter-rouge">SetPixel()</code> methods of any Texture2D object.</p> <ul> <li>So I created method that took an image an returned a Texture2D corresponding to it.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">Texture2D</span> <span class="nf">GetTextureFromImage</span><span class="p">(</span><span class="n">Image</span> <span class="n">targetImage</span><span class="p">)</span> <span class="p">{}</span></code></pre></figure> <ul> <li>Then I created an empty texture with the width and height of the image.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">Rect</span> <span class="n">rect</span> <span class="p">=</span> <span class="n">targetImage</span><span class="p">.</span><span class="n">sprite</span><span class="p">.</span><span class="n">rect</span><span class="p">;</span>
<span class="n">Texture2D</span> <span class="n">texture</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Texture2D</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">rect</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">rect</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
                </code></pre></figure> <ul> <li>Finally the pixels on the original image are mirrored on the pixels of the empty texture using the <code class="language-plaintext highlighter-rouge">SetPixels()</code> method.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">texture</span><span class="p">.</span><span class="nf">SetPixels</span><span class="p">(</span>
        <span class="n">targetImage</span><span class="p">.</span><span class="n">sprite</span><span class="p">.</span><span class="n">texture</span><span class="p">.</span><span class="nf">GetPixels</span><span class="p">(</span>
            <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span><span class="p">,</span>
            <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">rect</span><span class="p">.</span><span class="n">y</span><span class="p">,</span>
            <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">rect</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> 
            <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">rect</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
    <span class="n">texture</span><span class="p">.</span><span class="nf">Apply</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">texture</span><span class="p">;</span>
                </code></pre></figure> <h2 id="20-image-editing-algorithms-approach"><strong>2.0 Image Editing Algorithms: Approach</strong></h2> <p>I chose to work on a series of image editing techniques. My plan was to apply these algorithms with different settings, essentially creating pre-defined configurations for editing images. <strong>Most of these algorithms shall serve the sole purpose of giving the image a low-quality-meme look”.</strong></p> <h4 id="21-saturation-control"><strong>2.1 Saturation Control</strong></h4> <p>The first control I wished to establish was for Saturation i.e the intensity of the color of each pixel of the image.</p> <ul> <li>A saturation value of 0 makes the image grayscale.</li> <li>A value of 1 keeps the original colors unchanged.</li> <li>Anything above 1 makes the image more vibrant.</li> </ul> <p><br/></p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Saturation_Diagram-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Saturation_Diagram-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Saturation_Diagram-1400.webp"/> <img src="/assets/img/Saturation_Diagram.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Algorithm for Saturation Control" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Algorithm for Saturation Control </div> <p>So the basic algorithm I used to achieve saturation control was–</p> <ol> <li>Getting the texture from the image and creating an empty texture to assign the edits texture to.</li> </ol> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">originalTexture</span> <span class="p">=</span> <span class="nf">GetTextureFromImage</span><span class="p">(</span><span class="n">image</span><span class="p">);</span>
<span class="n">modifiedTexture</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Texture2D</span><span class="p">(</span><span class="n">originalTexture</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">originalTexture</span><span class="p">.</span><span class="n">height</span><span class="p">);</span></code></pre></figure> <ol> <li>Looping through the pixels to access the HSV values from their color. The <code class="language-plaintext highlighter-rouge">saturation</code> value is of importance here as we are going to alter it, so it is passed as a reference type.</li> </ol> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="c1">// accessing the texture code here</span>

<span class="n">Color</span><span class="p">[]</span> <span class="n">pixels</span> <span class="p">=</span> <span class="n">originalTexture</span><span class="p">.</span><span class="nf">GetPixels</span><span class="p">();</span>
<span class="kt">int</span> <span class="n">totalPixels</span> <span class="p">=</span> <span class="n">pixels</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">totalPixels</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="n">Color</span> <span class="n">pixelColor</span> <span class="p">=</span> <span class="n">pixels</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
    <span class="n">Color</span><span class="p">.</span><span class="nf">RGBToHSV</span><span class="p">(</span><span class="n">pixelColor</span><span class="p">,</span> <span class="k">out</span> <span class="kt">float</span> <span class="n">hue</span><span class="p">,</span> <span class="k">out</span> <span class="kt">float</span> <span class="n">saturation</span><span class="p">,</span> <span class="k">out</span> <span class="kt">float</span> <span class="k">value</span><span class="p">);</span>    
<span class="p">}</span></code></pre></figure> <ol> <li>Applying the saturation to each pixel. The <code class="language-plaintext highlighter-rouge">saturation</code> value is multiplied by a <code class="language-plaintext highlighter-rouge">saturationFactor</code> to alter it. And finally a new array of Color of length the same as the original image is assigned the color with the new <code class="language-plaintext highlighter-rouge">saturation</code> value.</li> </ol> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">Color</span><span class="p">[]</span> <span class="n">modifiedPixels</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Color</span><span class="p">[</span><span class="n">totalPixels</span><span class="p">];</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">totalPixels</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="c1">// accessing HSV code here</span>
    <span class="n">saturation</span> <span class="p">*=</span> <span class="n">_saturationFactor</span><span class="p">;</span>
    <span class="n">modifiedPixels</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="nf">HSVToRGB</span><span class="p">(</span><span class="n">hue</span><span class="p">,</span> <span class="n">saturation</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure> <ol> <li>A new texture with the saturated pixels is created and assigned to a sprite.</li> </ol> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">modifiedTexture</span><span class="p">.</span><span class="nf">SetPixels</span><span class="p">(</span><span class="n">modifiedPixels</span><span class="p">);</span>
<span class="n">modifiedTexture</span><span class="p">.</span><span class="nf">Apply</span><span class="p">();</span>

<span class="n">Sprite</span> <span class="n">modifiedSprite</span> <span class="p">=</span> <span class="n">Sprite</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="n">modifiedTexture</span><span class="p">,</span>
                                      <span class="k">new</span> <span class="nf">Rect</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span>
                                      <span class="n">modifiedTexture</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">modifiedTexture</span><span class="p">.</span><span class="n">height</span><span class="p">),</span>
                                      <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0.5f</span><span class="p">,</span> <span class="m">0.5f</span><span class="p">));</span>
<span class="n">image</span><span class="p">.</span><span class="n">sprite</span> <span class="p">=</span> <span class="n">modifiedSprite</span><span class="p">;</span></code></pre></figure> <p><br/></p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/saturationFactor-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/saturationFactor-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/saturationFactor-1400.webp"/> <img src="/assets/img/saturationFactor.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Saturation Control" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Saturation Control </div> <h4 id="22-adding-gaussian-blur"><strong>2.2 Adding Gaussian Blur</strong></h4> <p>Next in the list are algorithms that helps blur an image using a Gaussian Function. This helps achieve the bokeh effect. It has the effect of reducing an image’s high frequency components and thus acting like a low-pass filter.</p> <ol> <li><strong>Creating the Gaussian Kernel</strong></li> </ol> <ul> <li>First we create a gaussian kernel of a given size and radius. The gaussian kernel is a float 2D matrix (<code class="language-plaintext highlighter-rouge">float[,]</code>). Each element in the matrix is a weight that determines the contribution of each pixel to the blurring process. These weights are caluclated based on the Gaussian distribution formula.</li> </ul> <p align="center"> <img src="https://latex.codecogs.com/svg.image?{\color{White}f(x)&space;=&space;\frac{1}{\sigma\sqrt{2\pi}}&space;e^{-\frac{(x-\mu)^2}{2\sigma^2}}}" style="color:white;"/> </p> <ul> <li><strong>Input Parameters:</strong> The <code class="language-plaintext highlighter-rouge">CreateGaussianKernel()</code> method takes the <code class="language-plaintext highlighter-rouge">radius</code> and <code class="language-plaintext highlighter-rouge">size</code> of the kernel as the parameter and returns a 2D matrix (<code class="language-plaintext highlighter-rouge">float[,]</code>). The <code class="language-plaintext highlighter-rouge">size</code> represents the dimensions of the kernel, and the <code class="language-plaintext highlighter-rouge">radius</code> controls the spread of the blur effect.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="kt">float</span><span class="p">[,]</span> <span class="nf">CreateGaussianKernel</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">)</span> <span class="p">{}</span></code></pre></figure> <ul> <li><strong>Initialization:</strong> An empty 2D array called <code class="language-plaintext highlighter-rouge">kernel</code> of size x size is initialized. This array will store the weights that determine the strength of blurring for each pixel. The variable <code class="language-plaintext highlighter-rouge">sigma</code> is calculated as <code class="language-plaintext highlighter-rouge">radius / 3f</code>. <code class="language-plaintext highlighter-rouge">sigma</code> is a parameter that affects the spread of the Gaussian distribution. A larger sigma value results in a wider spread of the blur. The constant for the gaussian distribution is calculated as twice the <code class="language-plaintext highlighter-rouge">sigma</code> squared.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="kt">float</span><span class="p">[,]</span> <span class="n">kernel</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">size</span><span class="p">,</span> <span class="n">size</span><span class="p">];</span>
<span class="kt">float</span> <span class="n">sigma</span> <span class="p">=</span> <span class="n">radius</span> <span class="p">/</span> <span class="m">3f</span><span class="p">;</span> 
<span class="kt">float</span> <span class="n">twoSigmaSquare</span> <span class="p">=</span> <span class="m">2f</span> <span class="p">*</span> <span class="n">sigma</span> <span class="p">*</span> <span class="n">sigma</span><span class="p">;</span> 
<span class="kt">float</span> <span class="n">totalWeight</span> <span class="p">=</span> <span class="m">0f</span><span class="p">;</span> </code></pre></figure> <ul> <li><strong>Gaussian and Total Weight Calculation:</strong> The nested loops iterate over each element of the <code class="language-plaintext highlighter-rouge">kernel</code> array. For each element at position [y, x], it calculates the squared distance from the center of the kernel. The formula <em>x * x + y * y</em> calculates the squared Euclidean distance. Using the squared distance, it calculates the weight using the formula <em>Mathf.Exp(-distance / twoSigmaSquare)</em>. This weight is a measure of how much influence a pixel at that distance should have on the blurring process. The greater the distance, the smaller the weight. The calculated weight is assigned to the corresponding position in the kernel array. The <code class="language-plaintext highlighter-rouge">totalWeight</code> variable keeps track of the sum of all the weights in the kernel. This sum is used to normalize the kernel later.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="c1">// intialization code here</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="p">-</span><span class="n">size</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;=</span> <span class="n">size</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span> <span class="c1">// -size / 2 to size / 2</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="p">-</span><span class="n">size</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;=</span> <span class="n">size</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span> <span class="c1">// -size / 2 to size / 2</span>
    <span class="p">{</span>
        <span class="kt">float</span> <span class="n">distance</span> <span class="p">=</span> <span class="n">x</span> <span class="p">*</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span> <span class="p">*</span> <span class="n">y</span><span class="p">;</span> 
        <span class="kt">float</span> <span class="n">weight</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Exp</span><span class="p">(-</span><span class="n">distance</span> <span class="p">/</span> <span class="n">twoSigmaSquare</span><span class="p">);</span> 
        <span class="n">kernel</span><span class="p">[</span><span class="n">y</span> <span class="p">+</span> <span class="n">size</span> <span class="p">/</span> <span class="m">2</span><span class="p">,</span> <span class="n">x</span> <span class="p">+</span> <span class="n">size</span> <span class="p">/</span> <span class="m">2</span><span class="p">]</span> <span class="p">=</span> <span class="n">weight</span><span class="p">;</span> 
        <span class="n">totalWeight</span> <span class="p">+=</span> <span class="n">weight</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure> <ul> <li><strong>Kernel Normalization:</strong> After calculating all the weights, the kernel is normalized to ensure that the sum of all the weights equals 1. This step is essential to maintain the overall brightness of the image during blurring. The nested loops iterate over each element of the <code class="language-plaintext highlighter-rouge">kernel</code> array again. Each weight is divided by the <code class="language-plaintext highlighter-rouge">totalWeight</code>, effectively scaling down the weights to ensure their sum equals 1. And then the <code class="language-plaintext highlighter-rouge">kernel</code> is returned.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="c1">// intialization code here</span>

<span class="c1">// weight calculation code here</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="n">kernel</span><span class="p">[</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span> <span class="p">/=</span> <span class="n">totalWeight</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">return</span> <span class="n">kernel</span><span class="p">;</span></code></pre></figure> <ol> <li><strong>Applying the Gaussian Kernel</strong></li> </ol> <p>The gaussian kernel created above is applied to the pixels of the image thereby convulating the kernel with the particular pixel and its neighbouring pixels, thus calculating the weighted sum of their colors. This sum becomes the new color value for the central pixel, resulting in the blurring effect.</p> <ul> <li><strong>Input Parameters:</strong> The <code class="language-plaintext highlighter-rouge">ApplyKernel()</code> method takes a Texture2D as input along with a <code class="language-plaintext highlighter-rouge">kernel</code>, <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code> (position within the image) and <code class="language-plaintext highlighter-rouge">size</code> of the kernel as the parameter. It then calculates and returns the weighted average of colors in the neighborhood around the (x, y) position using the provided Gaussian kernel.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">Color</span> <span class="nf">ApplyKernel</span><span class="p">(</span><span class="n">Texture2D</span> <span class="n">texture</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">float</span><span class="p">[,]</span> <span class="n">kernel</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{}</span></code></pre></figure> <ul> <li><strong>Initialization:</strong> The 3 float variables for the RGB values are initalized to accumulate the weighted sum of red, green, and blue color channels. The half-size of the kernel is calculated as well and this is used to determine the bounds of the neighborhood around the (x, y) position.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="kt">float</span> <span class="n">r</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">g</span> <span class="p">=</span> <span class="m">0f</span><span class="p">,</span> <span class="n">b</span> <span class="p">=</span> <span class="m">0f</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">halfSize</span> <span class="p">=</span> <span class="n">size</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span></code></pre></figure> <ul> <li><strong>Looping through the Kernel:</strong> Nested for loops iterate over each cell in kernel. The outer <code class="language-plaintext highlighter-rouge">j</code> loop iterates over the rows of the kernel whereas the inner <code class="language-plaintext highlighter-rouge">i</code> loop iterates over its columns.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
    <span class="p">{</span>
        
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure> <ul> <li><strong>Calculating pixel coordinates of Input Image:</strong> <code class="language-plaintext highlighter-rouge">offsetX</code> and <code class="language-plaintext highlighter-rouge">offsetY</code> is calculated inside the loop to represent the corresponding pixel coordinates in the input image based on the current <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> position within the image and the <code class="language-plaintext highlighter-rouge">i</code> and <code class="language-plaintext highlighter-rouge">j</code> indices. Both these values are clamped to the bounds of the image.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="kt">int</span> <span class="n">offsetX</span> <span class="p">=</span> <span class="n">x</span> <span class="p">+</span> <span class="n">i</span> <span class="p">-</span> <span class="n">halfSize</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">offsetY</span> <span class="p">=</span> <span class="n">y</span> <span class="p">+</span> <span class="n">j</span> <span class="p">-</span> <span class="n">halfSize</span><span class="p">;</span>

<span class="n">offsetX</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">offsetX</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">texture</span><span class="p">.</span><span class="n">width</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span>
<span class="n">offsetY</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Clamp</span><span class="p">(</span><span class="n">offsetY</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">texture</span><span class="p">.</span><span class="n">height</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span></code></pre></figure> <ul> <li><strong>Retrieving and Updating the color values of pixels:</strong> The color values of pixels at calculated coordinates <code class="language-plaintext highlighter-rouge">offsetX</code> and <code class="language-plaintext highlighter-rouge">offsetY</code> are retrieved from the input texture. The RGB values intialized earlier are updated by adding the color values retrieved multiplied by the weight value from the Gaussian Kernel matrix from the <code class="language-plaintext highlighter-rouge">i</code> and <code class="language-plaintext highlighter-rouge">j</code> position. The final color obtained is returned.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">Color</span> <span class="n">pixel</span> <span class="p">=</span> <span class="n">texture</span><span class="p">.</span><span class="nf">GetPixel</span><span class="p">(</span><span class="n">offsetX</span><span class="p">,</span> <span class="n">offsetY</span><span class="p">);</span>
<span class="kt">float</span> <span class="n">weight</span> <span class="p">=</span> <span class="n">kernel</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">];</span>

<span class="n">r</span> <span class="p">+=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">r</span> <span class="p">*</span> <span class="n">weight</span><span class="p">;</span>
<span class="n">g</span> <span class="p">+=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">g</span> <span class="p">*</span> <span class="n">weight</span><span class="p">;</span>
<span class="n">b</span> <span class="p">+=</span> <span class="n">pixel</span><span class="p">.</span><span class="n">b</span> <span class="p">*</span> <span class="n">weight</span><span class="p">;</span></code></pre></figure> <ol> <li><strong>Applying the Gaussian Blur</strong> Now we apply the gaussian blur to the image by calculating the kernel, processing the pixel and updating the image.</li> </ol> <ul> <li><strong>Input Parameters:</strong> The <code class="language-plaintext highlighter-rouge">ApplyGaussianBlur()</code> method takes a Texture2D as input along with the <code class="language-plaintext highlighter-rouge">radius</code> of the Gaussian Blur needed (basically used as the size of the kernel) and returns the blurred texture.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="n">Texture2D</span> <span class="nf">ApplyGaussianBlur</span><span class="p">(</span><span class="n">Texture2D</span> <span class="n">sourceTexture</span><span class="p">,</span> <span class="kt">float</span> <span class="n">radius</span><span class="p">)</span> <span class="p">{}</span></code></pre></figure> <ul> <li><strong>Calculating Kernel size and Kernel:</strong> The Kernel size is obtained by rounding the <code class="language-plaintext highlighter-rouge">radius</code> to the nearest integer, doubling it and then adding 1 to it, ensuring coverage of sufficient area around each pixel.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="kt">int</span> <span class="n">kernelSize</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">RoundToInt</span><span class="p">(</span><span class="n">radius</span><span class="p">)</span> <span class="p">*</span> <span class="m">2</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
<span class="kt">float</span><span class="p">[,]</span> <span class="n">kernel</span> <span class="p">=</span> <span class="nf">CreateGaussianKernel</span><span class="p">(</span><span class="n">kernelSize</span><span class="p">,</span> <span class="n">radius</span><span class="p">);</span></code></pre></figure> <ul> <li><strong>Creating Blurred Texture:</strong> A new <code class="language-plaintext highlighter-rouge">blurredTexture</code> with same dimensions as <code class="language-plaintext highlighter-rouge">sourceTexture</code> is initialized.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">Color</span><span class="p">[]</span> <span class="n">pixels</span> <span class="p">=</span> <span class="n">sourceTexture</span><span class="p">.</span><span class="nf">GetPixels</span><span class="p">();</span>
<span class="n">Color</span><span class="p">[]</span> <span class="n">blurredPixels</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Color</span><span class="p">[</span><span class="n">pixels</span><span class="p">.</span><span class="n">Length</span><span class="p">];</span></code></pre></figure> <ul> <li><strong>Iterating through pixels:</strong> A nested loop is used to access the pixels of the <code class="language-plaintext highlighter-rouge">sourceTexture</code>. For each pixel at (<code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>), the <code class="language-plaintext highlighter-rouge">ApplyKernel()</code> function is called to calculate the new color of that pixel. The calculated blurrer color is stored in the corresponding position of the <code class="language-plaintext highlighter-rouge">blurredPixels</code> array.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">sourceTexture</span><span class="p">.</span><span class="n">height</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">sourceTexture</span><span class="p">.</span><span class="n">width</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="n">Color</span> <span class="n">blurredColor</span> <span class="p">=</span> <span class="nf">ApplyKernel</span><span class="p">(</span><span class="n">sourceTexture</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">kernel</span><span class="p">,</span> <span class="n">kernelSize</span><span class="p">);</span>
        <span class="n">blurredPixels</span><span class="p">[</span><span class="n">y</span> <span class="p">*</span> <span class="n">sourceTexture</span><span class="p">.</span><span class="n">width</span> <span class="p">+</span> <span class="n">x</span><span class="p">]</span> <span class="p">=</span> <span class="n">blurredColor</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure> <ul> <li><strong>Applying Blurred pixels to the Texture:</strong> After processing all the pixels, the <code class="language-plaintext highlighter-rouge">blurredPixels</code> array is assigned to the <code class="language-plaintext highlighter-rouge">blurredTexture</code> and it is returned.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">blurredTexture</span><span class="p">.</span><span class="nf">SetPixels</span><span class="p">(</span><span class="n">blurredPixels</span><span class="p">);</span>
<span class="n">blurredTexture</span><span class="p">.</span><span class="nf">Apply</span><span class="p">();</span>

<span class="k">return</span> <span class="n">blurredTexture</span><span class="p">;</span></code></pre></figure> <ul> <li><strong>Blurred Sprite:</strong> A sprite is created from the blurred texture and is applied to the image.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">Sprite</span> <span class="n">blurredSprite</span> <span class="p">=</span> <span class="n">Sprite</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="n">blurredTexture</span><span class="p">,</span>
                                    <span class="k">new</span> <span class="nf">Rect</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">blurredTexture</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">blurredTexture</span><span class="p">.</span><span class="n">height</span><span class="p">),</span>
                                    <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="m">0.5f</span><span class="p">,</span> <span class="m">0.5f</span><span class="p">));</span>
<span class="n">image</span><span class="p">.</span><span class="n">sprite</span> <span class="p">=</span> <span class="n">blurredSprite</span><span class="p">;</span></code></pre></figure> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/blurRadius-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/blurRadius-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/blurRadius-1400.webp"/> <img src="/assets/img/blurRadius.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="Gaussian Blur Control" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Gaussian Blur Control </div> <h4 id="30-image-compressor"><strong>3.0 Image Compressor</strong></h4>]]></content><author><name></name></author><category term="blog"/><category term="unity3d"/><category term="photo-editor"/><summary type="html"><![CDATA[I made an image editor using Unity just for the kicks!]]></summary></entry><entry><title type="html">Jantar Mantar Course Module - Self Paced</title><link href="https://alfolio.github.io/docs/2023/jantar-mantar-module-self-paced/" rel="alternate" type="text/html" title="Jantar Mantar Course Module - Self Paced"/><published>2023-04-18T10:30:00+00:00</published><updated>2023-04-18T10:30:00+00:00</updated><id>https://alfolio.github.io/docs/2023/jantar-mantar-module-self-paced</id><content type="html" xml:base="https://alfolio.github.io/docs/2023/jantar-mantar-module-self-paced/"><![CDATA[<p>This course aims at equipping students with the ability to –</p> <ul> <li>Analyze and comprehend the intricacies of the relationship between time and the shadow cast by the Sundials (especially Jantar Mantar’s sundial – Samrat Yantra).</li> <li>Design a low level implementation of a sundial along with a small-scale model of Samrat Yantra.</li> </ul> <h3 id="10-learning-through-activities">1.0 Learning through Activities</h3> <h4 id="11-stick-and-shadow-activity">1.1 Stick and Shadow Activity</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/sns_1_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/sns_1_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/sns_1_jm-1400.webp"/> <img src="/assets/img/sns_1_jm.png" class="img-fluid rounded z-depth-1 d-block ml-auto" width="auto" height="auto" title="screenshot" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/sns_2_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/sns_2_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/sns_2_jm-1400.webp"/> <img src="/assets/img/sns_2_jm.png" class="img-fluid rounded z-depth-1 d-block mr-auto" width="auto" height="auto" title="screenshot" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Materials needed:</strong></p> <ul> <li>A stick or a dowel</li> <li>Chalk or masking tape</li> <li>A watch or a clock</li> </ul> <p><strong>Instructions:</strong></p> <ul> <li>Choose a sunny day and find a flat surface that receives sunlight, such as a patio or a paved area. Make sure there are no obstructions that would block the sunlight.</li> <li>Using the chalk or masking tape, draw a circle on the ground with a diameter of at least one meter. This circle represents the face of the sundial.</li> <li>Insert the stick or dowel in the center of the circle, making sure it stands up straight.</li> <li>At exactly noon (12:00 PM), stand the stick or dowel upright so that it casts a shadow on the circle. Mark the tip of the shadow with a small dot or a piece of chalk.</li> <li>Wait for 15 minutes and mark the tip of the shadow again. Repeat this process every 15 minutes until 3:00 PM, making sure to mark each new position of the shadow on the circle.</li> <li>Connect the dots using a straight edge or a ruler to create a curved line. This line represents the path of the sun in the sky.</li> <li>Divide the circle into 12 equal parts using the curved line as a guide. Mark each division with a number from 1 to 12, starting at the top of the circle and moving clockwise.</li> <li>Your sundial is now complete! To tell the time, stand the stick or dowel upright so that it casts a shadow on the circle. The position of the shadow on the circle will indicate the time of day.</li> </ul> <p><strong>Tips:</strong></p> <ul> <li>Make sure to use a watch or a clock to keep track of the time accurately.</li> <li>If the stick or dowel is too short, you can use a stack of books or a box to elevate it.</li> <li>If the surface you’re using isn’t flat, make sure to adjust the angle of the stick or dowel so that it’s perpendicular to the ground.</li> <li>If you live in the Southern Hemisphere, make sure to point the stick or dowel towards the North instead of the South.</li> </ul> <h4 id="12-samrat-yantra-model">1.2 Samrat Yantra Model</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/samrat_yantra_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/samrat_yantra_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/samrat_yantra_jm-1400.webp"/> <img src="/assets/img/samrat_yantra_jm.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Materials Needed:</strong></p> <ul> <li>Ruler</li> <li>Compass</li> <li>Scissors</li> <li>Cardboard or stiff paper</li> <li>Pencil</li> <li>Tape</li> <li>Protractor</li> <li>Whiteboard or chart paper</li> </ul> <p><strong>Instructions:</strong></p> <ul> <li>Open the <a href="https://www.jantarmantar.org/resources/Projects/SY-Model/Samrat-Yantra-Model-Templates.pdf">Samrat Yantra Model Template</a>.</li> <li>Use a ruler and a compass to trace the shapes from the above document onto a piece of cardboard or stiff paper.</li> <li>Cut out the traced shapes using scissors.</li> <li>Assemble the individual cut pieces of sundial using tape to attach the various parts together.</li> <li>Use a protractor to set the angle of the gnomon to the latitude of their location.</li> <li>Place the Samrat Yantra in a sunny location and use a pencil to mark the position of the shadow cast by the gnomon at different times of the day.</li> <li>Record the time corresponding to each shadow position on a whiteboard or chart paper in a similar fashion to the previous activity.</li> </ul> <h3 id="20-exploring-samrat-yantra-using-a-simulation">2.0 Exploring Samrat Yantra using a Simulation</h3> <h4 id="21-introducing-the-simulation">2.1 Introducing the simulation</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/int-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/int-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/int-1400.webp"/> <img src="/assets/img/int.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Time to explore more about Samrat Yantra that you designed in the previous activity <a href="https://www.jantarmantar.org/learn/observatories/instruments/samrat/index.html">here</a>.</li> <li>In case you’re interested, you can buy and refer to page 47-50 of the book <a href="https://www.amazon.in/-/hi/Anisha-Shekhar-Mukherji/dp/B01N361SW3">Jantar Mantar by Anisha Shekhar Mukherji</a> for additional details.</li> <li>The virtual simulation of Samrat Yantra is hosted <a href="https://aniketrajnish.github.io/build/">here</a>. Please visit it and try to work around it on your own before visiting the next section on what exactly needs to be done.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/hint-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/hint-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/hint-1400.webp"/> <img src="/assets/img/hint.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> You can use these hints/click on the hint button in the simulation. </div> <h4 id="22-exploring-the-simulation-activity">2.2 Exploring the simulation activity</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/exp-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/exp-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/exp-1400.webp"/> <img src="/assets/img/exp.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Materials Needed:</strong></p> <ul> <li>Computer with Internet Access</li> <li>Pen and paper</li> </ul> <p><strong>Instructions:</strong></p> <ul> <li>Recall what you learned about measuring time using sundials and the stick and shadow method and about Samrat Yantra in general.</li> <li>Open the simulation through this <a href="https://aniketrajnish.github.io/build/">link</a>.</li> <li>Click on the Start button on the top right corner to begin the simulation and the Stop button to end it.</li> <li>Use the slider or left/right buttons to rotate the camera and check the shadows casted by sundials and the Samrat Yantra from different angles.</li> <li>Click on the Forward/Backward button to skip to a random time in forward/backward direction.</li> <li>Input a specific time in the custom time input field on the top left to skip to that particular time.</li> <li>Take screenshots at the same times as the previous activities through different angles. (i.e at 12 PM, 12.15 PM…)</li> </ul> <h3 id="30-comparing-the-activities">3.0 Comparing the Activities</h3> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/two_sundials-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/two_sundials-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/two_sundials-1400.webp"/> <img src="/assets/img/two_sundials.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Materials:</strong></p> <ul> <li>Previous Models from both the activities</li> <li>Computer/Laptop</li> <li>Chart paper</li> <li>Pencil</li> <li>Ruler</li> <li>Marker</li> </ul> <p><strong>Instructions:</strong></p> <ul> <li>Set up both the Samrat Yantra and the stick and shadow sundial in a sunny location.</li> <li>Mark the position of the shadow cast by the gnomon on the sundial’s face at a specific time of the day (e.g. 12:00 PM, 12.15 PM..).</li> <li>Take screenshot of shadows shown by the simulation by inputting the cuurent time.</li> <li>Compare the time shown by the Samrat Yantra and the stick and shadow sundial for these times using a ruler and a marker to draw a line on a chart paper to represent the time shown by each instrument.</li> <li>Finally compare these with the screenshots taken.</li> <li>Try to come up with a relation between shadows and time.</li> </ul> <h3 id="40-assessment-and-reward">4.0 Assessment and Reward</h3> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/anr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/anr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/anr-1400.webp"/> <img src="/assets/img/anr.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="41-self-evaluation-assessment">4.1 Self Evaluation Assessment</h4> <ul> <li>Please approximate time (upto 1 hour) for these images by comparing it with the screenshots of simulation you took:</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t4-1400.webp"/> <img src="/assets/img/t4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t1-1400.webp"/> <img src="/assets/img/t1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t2-1400.webp"/> <img src="/assets/img/t2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t3-1400.webp"/> <img src="/assets/img/t3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t5-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t5-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t5-1400.webp"/> <img src="/assets/img/t5.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Please approximate time (upto 1 hour) for these images by comparing it with the stick and shadow chart you drew:</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t4-1400.webp"/> <img src="/assets/img/t4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t1-1400.webp"/> <img src="/assets/img/t1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t2-1400.webp"/> <img src="/assets/img/t2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t3-1400.webp"/> <img src="/assets/img/t3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t5-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t5-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t5-1400.webp"/> <img src="/assets/img/t5.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Please approximate time (upto 1 hour) for these images by comparing it with the screenshots of simulation you took:</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t4-1400.webp"/> <img src="/assets/img/t4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t1-1400.webp"/> <img src="/assets/img/t1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t2-1400.webp"/> <img src="/assets/img/t2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t3-1400.webp"/> <img src="/assets/img/t3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t5-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t5-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t5-1400.webp"/> <img src="/assets/img/t5.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="42-reward-based-assessment">4.2 Reward-Based Assessment</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gnr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gnr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gnr-1400.webp"/> <img src="/assets/img/gnr.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Come up with 1-2 page documentation of which method would you prefer to approximate shadows based upon the time and why. Additionaly, if you could derive a particular relation between the length of the shadows and time write that as well. Mail this document to <a href="mailto:aniket.r@iitgn.ac.in">aniket.r@iitgn.ac.in</a>.</li> <li>Those submitting the best document will get a sponsored trip to Jantar Mantar. Meanwhile you can always visit it virtually using the Virtual Walkthrough we’ve created at you nearest VR station. Download <a href="https://drive.google.com/file/d/1Tl1-8rmnSVsxPQBQIukdewaNnmpg1TjH/view?usp=sharing">here</a>.</li> </ul>]]></content><author><name></name></author><category term="blog"/><category term="unity3d"/><category term="jantarmantar"/><category term="elearing"/><summary type="html"><![CDATA[A self paced course module to know about Samrat Yantra using the simulation that we've made!]]></summary></entry><entry><title type="html">Jantar Mantar Course Module</title><link href="https://alfolio.github.io/docs/2023/jantar-mantar-module/" rel="alternate" type="text/html" title="Jantar Mantar Course Module"/><published>2023-04-18T10:30:00+00:00</published><updated>2023-04-18T10:30:00+00:00</updated><id>https://alfolio.github.io/docs/2023/jantar-mantar-module</id><content type="html" xml:base="https://alfolio.github.io/docs/2023/jantar-mantar-module/"><![CDATA[<p>This course aims at equipping students with the ability to –</p> <ul> <li>Analyze and comprehend the intricacies of the relationship between time and the shadow cast by the Sundials (especially Jantar Mantar’s sundial).</li> <li>Design a low level implementation of a sundial along with a small-scale model of Samrat Yantra.</li> </ul> <h3 id="10-introducing-the-topic-through-questions">1.0 Introducing the topic through Questions</h3> <h4 id="11-whats-time">1.1 What’s Time?</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/time_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/time_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/time_jm-1400.webp"/> <img src="/assets/img/time_jm.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Do you what time is?</li> <li>What are some of the different units of time that we use, like seconds, minutes, hours, and days?</li> <li>How do you think our understanding of time has changed over the years?</li> </ul> <h4 id="12-how-would-you-measure-time">1.2 How would you measure time?</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/measure_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/measure_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/measure_jm-1400.webp"/> <img src="/assets/img/measure_jm.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Do you know how time is measured?</li> <li>Have you ever experienced a situation where it was challenging to measure time accurately? What happened?</li> <li>Let’s do an activity where we come up with creative ways to measure time! Can you think of ways to measure one minute, five minutes, or an hour without using a clock or a watch? Let’s see who can come up with the most creative ideas!</li> </ul> <h4 id="13-introducing-sundials">1.3 Introducing Sundials</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/sundial_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/sundial_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/sundial_jm-1400.webp"/> <img src="/assets/img/sundial_jm.png" class="img-fluid rounded z-depth-1 d-block ml-auto" width="auto" height="auto" title="screenshot" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/sundial_2_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/sundial_2_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/sundial_2_jm-1400.webp"/> <img src="/assets/img/sundial_2_jm.png" class="img-fluid rounded z-depth-1 d-block mr-auto" width="auto" height="auto" title="screenshot" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Someone mentioned the sun as a way to measure time. Did you know that people have been using the sun to measure time for thousands of years? Have you ever heard of a sundial?</li> <li>Have you ever seen a real-life sundial before? Where and when did you see it?</li> <li>Do you know how they work?</li> </ul> <h3 id="20-learning-through-activities">2.0 Learning through Activities</h3> <h4 id="21-stick-and-shadow-activity">2.1 Stick and Shadow Activity</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/sns_1_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/sns_1_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/sns_1_jm-1400.webp"/> <img src="/assets/img/sns_1_jm.png" class="img-fluid rounded z-depth-1 d-block ml-auto" width="auto" height="auto" title="screenshot" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/sns_2_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/sns_2_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/sns_2_jm-1400.webp"/> <img src="/assets/img/sns_2_jm.png" class="img-fluid rounded z-depth-1 d-block mr-auto" width="auto" height="auto" title="screenshot" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Materials needed:</strong></p> <ul> <li>A stick or a dowel</li> <li>Chalk or masking tape</li> <li>A watch or a clock</li> </ul> <p><strong>Instructions:</strong></p> <ul> <li>Choose a sunny day and find a flat surface that receives sunlight, such as a patio or a paved area. Make sure there are no obstructions that would block the sunlight.</li> <li>Using the chalk or masking tape, draw a circle on the ground with a diameter of at least one meter. This circle represents the face of the sundial.</li> <li>Insert the stick or dowel in the center of the circle, making sure it stands up straight.</li> <li>At exactly noon (12:00 PM), stand the stick or dowel upright so that it casts a shadow on the circle. Mark the tip of the shadow with a small dot or a piece of chalk.</li> <li>Wait for 15 minutes and mark the tip of the shadow again. Repeat this process every 15 minutes until 3:00 PM, making sure to mark each new position of the shadow on the circle.</li> <li>Connect the dots using a straight edge or a ruler to create a curved line. This line represents the path of the sun in the sky.</li> <li>Divide the circle into 12 equal parts using the curved line as a guide. Mark each division with a number from 1 to 12, starting at the top of the circle and moving clockwise.</li> <li>Your sundial is now complete! To tell the time, stand the stick or dowel upright so that it casts a shadow on the circle. The position of the shadow on the circle will indicate the time of day.</li> </ul> <p><strong>Tips:</strong></p> <ul> <li>Make sure to use a watch or a clock to keep track of the time accurately.</li> <li>If the stick or dowel is too short, you can use a stack of books or a box to elevate it.</li> <li>If the surface you’re using isn’t flat, make sure to adjust the angle of the stick or dowel so that it’s perpendicular to the ground.</li> <li>If you live in the Southern Hemisphere, make sure to point the stick or dowel towards the North instead of the South.</li> </ul> <h4 id="22-samrat-yantra-model">2.2 Samrat Yantra Model</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/samrat_yantra_jm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/samrat_yantra_jm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/samrat_yantra_jm-1400.webp"/> <img src="/assets/img/samrat_yantra_jm.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Materials Needed:</strong></p> <ul> <li>Ruler</li> <li>Compass</li> <li>Scissors</li> <li>Cardboard or stiff paper</li> <li>Pencil</li> <li>Tape</li> <li>Protractor</li> <li>Whiteboard or chart paper</li> </ul> <p><strong>Instructions:</strong></p> <ul> <li>Provide the students with the <a href="https://www.jantarmantar.org/resources/Projects/SY-Model/Samrat-Yantra-Model-Templates.pdf">Samrat Yantra Model Template</a> and explain the different views and proportions of the instrument without actually mentioning anything about Samrat Yantra in particular – can just introduce as a more refined/complex version of the previous sundial.</li> <li>Ask the students to use a ruler and a compass to trace the shapes onto a piece of cardboard or stiff paper.</li> <li>Have the students cut out the traced shapes using scissors.</li> <li>Ask the students to assemble the individual cut pieces of sundial using tape to attach the various parts together.</li> <li>Have the students use a protractor to set the angle of the gnomon to the latitude of their location.</li> <li>Ask the students to place their Samrat Yantra in a sunny location and use a pencil to mark the position of the shadow cast by the gnomon at different times of the day.</li> <li>Have the students record the time corresponding to each shadow position on a whiteboard or chart paper.</li> <li>Discuss with the students how the Samrat Yantra measures time using the position of the sun, and how its design takes into account the Earth’s axial tilt and the latitude of the location.</li> </ul> <h4 id="23-comparing-samrat-yantra-and-stick--shadow-sundial">2.3 Comparing Samrat Yantra and Stick &amp; Shadow Sundial</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/two_sundials-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/two_sundials-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/two_sundials-1400.webp"/> <img src="/assets/img/two_sundials.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Materials:</strong></p> <ul> <li>Previous Models from both the activities</li> <li>Chart paper</li> <li>Pencil</li> <li>Ruler</li> <li>Marker</li> </ul> <p><strong>Instructions:</strong></p> <ul> <li>Have the students set up both the Samrat Yantra and the stick and shadow sundial in a sunny location.</li> <li>Ask the students to mark the position of the shadow cast by the gnomon on the sundial’s face at a specific time of the day (e.g. 12:00 PM).</li> <li>Have the students record the time shown by the Samrat Yantra at the same time.</li> <li>Repeat steps 2 and 3 at different times of the day (e.g. 9:00 AM, 3:00 PM).</li> <li>Ask the students to compare the time shown by the Samrat Yantra and the stick and shadow sundial for each time of the day. They can use a ruler and a marker to draw a line on a chart paper to represent the time shown by each instrument.</li> <li>Have the students discuss the differences in the accuracy of the two instruments. Ask them to identify factors that might affect the accuracy of each instrument, such as the position of the sun, the Earth’s axial tilt, and the latitude of the location.</li> <li>Finally, ask the students to present their findings to the class and share their observations and conclusions.</li> </ul> <h3 id="30-exploring-samrat-yantra-using-a-simulation">3.0 Exploring Samrat Yantra using a Simulation</h3> <h4 id="31-introducing-the-simulation">3.1 Introducing the simulation</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/int-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/int-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/int-1400.webp"/> <img src="/assets/img/int.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Ask the students to bring their laptops in the next class/take them to the computer lab.</li> <li>Begin the lesson by reviewing what students know about measuring time by asking them to recall some of the methods they learned in the previous lessons, such as the stick and shadow activity.</li> <li>It’s time to introduce Samrat Yantra to students as something that they created in the second activity and is of national importance.</li> <li>Let people explore more about Samrat Yantra <a href="https://www.jantarmantar.org/learn/observatories/instruments/samrat/index.html">here</a> and refer to page 47-50 of the <a href="https://www.amazon.in/-/hi/Anisha-Shekhar-Mukherji/dp/B01N361SW3">book Jantar Mantar by Anisha Shekhar Mukherji</a>.</li> <li>Ask students if can perceive how Samrat Yantra works. Allow for discussion and ask guiding questions to help them understand the concept of shadows and their relation to time.</li> <li>Introduce the virtual simulation of Samrat Yantra hosted <a href="https://aniketrajnish.github.io/build/">here</a>. Explain that the simulation is designed to show how the instrument works by simulating the movement of the sun and the shadows it casts on the Yantra.</li> <li>Show students how to input the time and how the shadows change accordingly.</li> </ul> <h4 id="32-exploring-the-simulation">3.2 Exploring the simulation</h4> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/exp-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/exp-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/exp-1400.webp"/> <img src="/assets/img/exp.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Divide students into pairs or small groups and allow them to explore the simulation on their own and have a discussion over it. Encourage them to experiment with different times and observe how the shadows change.</li> <li>Keep a few volunteers who’ll be keeping a check on</li> <li>Allow them a time of around ~ 30 minutes to come up with a one page documentation of their learnings and how they feel they the shadows are related to time of the day.</li> <li>Once everyone has submitted their learnings, evaluate it in contrast to the actual intricacies mentioned in Page 51-75 of the Jantar Mantar book and help student identify the true relation between time and shadow casted.</li> <li>Conclude the lesson by summarizing the main points and reviewing what students learned about Samrat Yantra and the shadow simulation. Encourage them to continue exploring the simulation on their own as an assignment is about come up soon!</li> </ul> <h3 id="40-assessment-and-reward">4.0 Assessment and Reward</h3> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/anr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/anr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/anr-1400.webp"/> <img src="/assets/img/anr.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="41-theory-based-mcqs">4.1 Theory based MCQs</h4> <ul> <li>Which of the following is a natural way of measuring time? <ul> <li>Digital clocks</li> <li>Sundials</li> <li>Samrat Yantra</li> <li>Both b and c</li> </ul> </li> <li>How does a sundial work? <ul> <li>It uses a digital display to show the time</li> <li>It casts a shadow on a marked surface to indicate the time</li> <li>It uses a pendulum to measure time</li> <li>It uses sand flowing through a narrow opening to measure time</li> </ul> </li> <li>Which of the following is a benefit of using a digital clock to measure time? <ul> <li>It is easy to use and read</li> <li>It can be used even when there is no sun or light</li> <li>It is less expensive than other methods</li> <li>Both a and b</li> </ul> </li> <li>What is the Samrat Yantra? <ul> <li>A type of digital clock</li> <li>An ancient Indian astronomical instrument used to measure time</li> <li>A sundial used by the ancient Greeks</li> <li>A water clock used by the ancient Egyptians</li> </ul> </li> <li>How does the Samrat Yantra work? <ul> <li>It uses a pendulum to measure time</li> <li>It casts a shadow on a marked surface to indicate the time</li> <li>It uses sand flowing through a narrow opening to measure time</li> <li>None of the above</li> </ul> </li> <li>Which method of measuring time is most accurate? <ul> <li>Sundials</li> <li>Samrat Yantra</li> <li>Digital clocks</li> <li>They are all equally accurate</li> </ul> </li> <li>Which method of measuring time would be best to use on a cloudy day? <ul> <li>Sundial</li> <li>Samrat Yantra</li> <li>Digital clock</li> <li>None of the above</li> </ul> </li> <li>Which of the following is a disadvantage of using a sundial to measure time? <ul> <li>It requires sunlight to work</li> <li>It is less accurate than other methods</li> <li>It is more expensive than other methods</li> <li>Both a and b</li> </ul> </li> <li>How can knowledge of different methods of measuring time be useful in everyday life? <ul> <li>It can help in planning and managing time</li> <li>It can help in understanding historical and cultural significance of timekeeping</li> <li>It can aid in developing problem-solving and critical thinking skills</li> <li>All of the above</li> </ul> </li> <li>Which method of measuring time has been used the longest? <ul> <li>Sundials</li> <li>Samrat Yantra</li> <li>Digital clocks</li> <li>They have all been used for the same amount of time.</li> </ul> </li> </ul> <h3 id="42-theory-based-subjective">4.2 Theory based Subjective</h3> <ul> <li>List different methods of measuring time and state how would you measure time without using any device?</li> <li>How do the methods suggested by students differ in terms of accuracy and practicality?</li> <li>Why do you think standardized timekeeping using devices like sundials is preferable?</li> <li>How do sundials work? What is Samrat Yantra?</li> <li>Analyze the performance of a sundial using the simulation. What were the results and how do they compare to your expectations?</li> </ul> <h3 id="43-practical-based-questions">4.3 Practical based Questions</h3> <ul> <li>In what ways do you think modern timekeeping methods (like digital clocks and watches) are similar to and different from ancient timekeeping methods (like sundials and water clocks)? Which do you think is more useful or accurate, and why?</li> <li>Describe the behavior of the shadow cast by the Samrat Yantra as time progresses in the simulation. What factors affect the position and size of the shadow?</li> <li>Please approximate time (upto 1 hour) for these images: <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t4-1400.webp"/> <img src="/assets/img/t4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure></div></div> </li> </ul> <p>&lt;/figure&gt;</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    &lt;div class="col-sm mt-3 mt-md-0"&gt;
        &lt;figure&gt;
</code></pre></div></div> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t1-1400.webp"/> <img src="/assets/img/t1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <p>&lt;/figure&gt;</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    &lt;div class="col-sm mt-3 mt-md-0"&gt;
        &lt;figure&gt;
</code></pre></div></div> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t2-1400.webp"/> <img src="/assets/img/t2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <p>&lt;/figure&gt;</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    &lt;div class="col-sm mt-3 mt-md-0"&gt;
        &lt;figure&gt;
</code></pre></div></div> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t3-1400.webp"/> <img src="/assets/img/t3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <p>&lt;/figure&gt;</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="row"&gt;
    &lt;div class="col-sm mt-3 mt-md-0"&gt;
        &lt;figure&gt;
</code></pre></div></div> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/t5-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/t5-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/t5-1400.webp"/> <img src="/assets/img/t5.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <p>&lt;/figure&gt;</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;/div&gt;
&lt;/div&gt;
</code></pre></div></div> <h3 id="45-grading--reward">4.5 Grading &amp; Reward</h3> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gnr-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gnr-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gnr-1400.webp"/> <img src="/assets/img/gnr.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The weightage of marks for the entire course will be as follows – <ul> <li>Continous Cumulative Evaluation (Total - 60 marks) <ul> <li>What’s Time? Q/A - Class Participation (4 marks)</li> <li>How would you measure time? Q/A - Class Participation (4 marks)</li> <li>Introducing Sundials Q/A - Class Participation (4 marks)</li> <li>Stick and Shadow Activity - Outcome Shown (15 marks)</li> <li>Samrat Yantra Model - Outcome Shown (15 marks)</li> <li>Comparing Samrat Yantra and Stick &amp; Shadow Sundial - Outcome Shown (15 marks)</li> <li>Exploring the simulation - Report (3 marks)</li> </ul> </li> <li>Final Assessment (Total - 40 marks) <ul> <li>Theory based MCQs (10 marks - 1 mark each)</li> <li>Theory based Subjective (10 marks - 2 mark each)</li> <li>Practical based Questions (20 marks - 2 mark each for time identification, 5 mark each for subjective question)</li> </ul> </li> </ul> </li> <li>The grading scheme for the entire course will be as follows – <ul> <li>A : 90+ marks</li> <li>B : 80-90 marks</li> <li>C : 70-80 marks</li> <li>D : 60-70 marks</li> <li>E : 50-60 marks</li> <li><em>F</em> : &lt;50 marks</li> </ul> </li> <li>As a reward for their hard work and dedication, students who score an <strong>A or B or C</strong> grade on the Jantar Mantar lesson assessments will have the opportunity to experience a virtual walkthrough of Jantar Mantar using the VR simulation that we’ve created. This immersive experience will allow students to explore the complex instruments and observe how they function in a detailed and interactive manner. For those who score an A grade specifically, we will organize a field trip to Jantar Mantar in Jaipur, where they will have the opportunity to see the real instruments in person and learn more about their historical and cultural significance. On the other hand, students who score an F grade will be required to repeat the course and demonstrate a better understanding of the material before being eligible for any rewards or field trips. We hope that these incentives will motivate students to engage more deeply with the material and appreciate the wonders of ancient Indian astronomy and engineering.</li> </ul>]]></content><author><name></name></author><category term="blog"/><category term="unity3d"/><category term="jantarmantar"/><category term="elearing"/><summary type="html"><![CDATA[A course module to know about Samrat Yantra using the simulation that we've made!]]></summary></entry><entry><title type="html">making a 2D lighting system for Two Opposites</title><link href="https://alfolio.github.io/docs/2022/two-opoosites/" rel="alternate" type="text/html" title="making a 2D lighting system for Two Opposites"/><published>2022-11-14T15:00:00+00:00</published><updated>2022-11-14T15:00:00+00:00</updated><id>https://alfolio.github.io/docs/2022/two-opoosites</id><content type="html" xml:base="https://alfolio.github.io/docs/2022/two-opoosites/"><![CDATA[<p>Two opposites is a game about the journey of two opposites (characters with mirrored controls) separated by a mirror. They need to solve puzzles to escape the mirror world and finally meet each other. However, the challenge lies in the fact that they can only solve these puzzles together. You can play it in your browser <a href="https://makra.itch.io/two-opposites">here</a>.</p> <p>The game was made in a week (in a team of three) for the Brackeys Game Jam (10k+ people participated worldwide) and ranked <strong>#22 in the innovation category.</strong></p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/TwoOppLogo-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/TwoOppLogo-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/TwoOppLogo-1400.webp"/> <img src="/assets/img/TwoOppLogo.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Two Opposites Logo </div> <h4 id="10-2d-lighting-system">1.0 2D Lighting System</h4> <p>Upon initial analysis, we decided that the atmosphere should be given the most priority while developing this game. And the visual appeal of the game played a significant role in that. Back when we started working on this project, Unity didn’t have any rendering pipeline that supported 2D lighting. So my task was to develop a 2D lighting system for the game.</p> <h4 id="11-2d-raycaster-gl---1st-iteration">1.1 2D Raycaster (GL) - 1st iteration</h4> <ul> <li>The basic idea was to draw transparent lines originating radially outwards from a sprite with negligible separation to give a sense of light coming out.</li> <li>I used the Unity’s low level <a href="https://docs.unity3d.com/ScriptReference/GL.html">Graphics Library (gl)</a> to draw lines between two points.</li> <li>The raycast loop formulated- <br/></li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">for</span> <span class="p">(</span><span class="kt">float</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">theta</span><span class="p">;</span> <span class="n">i</span> <span class="p">+=</span> <span class="n">steps</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">GL</span><span class="p">.</span><span class="nf">Begin</span><span class="p">(</span><span class="n">GL</span><span class="p">.</span><span class="n">LINES</span><span class="p">);</span>               
    <span class="n">GL</span><span class="p">.</span><span class="nf">Color</span><span class="p">(</span><span class="n">col</span><span class="p">);</span> <span class="c1">// Initializing GL Library with white color as input</span>

    <span class="n">GL</span><span class="p">.</span><span class="nf">Vertex3</span><span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span> <span class="c1">//strating point</span>
    <span class="n">GL</span><span class="p">.</span><span class="nf">Vertex3</span><span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="p">+</span> 
    <span class="n">Mathf</span><span class="p">.</span><span class="nf">Cos</span><span class="p">(</span><span class="n">i</span> <span class="p">*</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Deg2Rad</span><span class="p">)</span> <span class="p">*</span> <span class="n">maxVisiblityDistance</span><span class="p">,</span> 
    <span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> 
    <span class="n">Mathf</span><span class="p">.</span><span class="nf">Sin</span><span class="p">(</span><span class="n">i</span> <span class="p">*</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Deg2Rad</span><span class="p">)</span> <span class="p">*</span> <span class="n">maxVisiblityDistance</span><span class="p">,</span> 
    <span class="m">0</span><span class="p">);</span> <span class="c1">//ending point</span>

    <span class="n">GL</span><span class="p">.</span><span class="nf">End</span><span class="p">();</span> <span class="c1">//clearing garbage            </span>
<span class="p">}</span></code></pre></figure> <ul> <li>This loop draws rays from the player’s position to equally spaced points around the player.</li> <li>The angle that light covers is governed by <code class="language-plaintext highlighter-rouge">theta</code>.</li> <li>The spacing between each ray is governed by <code class="language-plaintext highlighter-rouge">steps</code>.</li> <li>The color of the rays is governed by <code class="language-plaintext highlighter-rouge">col</code>.</li> <li>The length of light ray is governed by <code class="language-plaintext highlighter-rouge">maxVisiblityDistance</code>.</li> <li>All of these variables were serialized in the inspector.</li> <li>This script is attached to the MainCamera and the loop is called in <code class="language-plaintext highlighter-rouge">OnPostRender()</code> method so that the lines are rendered as soon as the camera finishes rendering the scene.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/theta.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/theta.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/theta.gif-1400.webp"/> <img src="/assets/img/theta.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Adjusting theta </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/steps.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/steps.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/steps.gif-1400.webp"/> <img src="/assets/img/steps.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Adjusting steps </div> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/col.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/col.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/col.gif-1400.webp"/> <img src="/assets/img/col.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Adjusting color </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/maxvdist.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/maxvdist.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/maxvdist.gif-1400.webp"/> <img src="/assets/img/maxvdist.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Adjusting max visibility distance </div> </div> </div> <h4 id="12-ray-material">1.2 Ray Material</h4> <ul> <li>The next task to make the light rays feel more natural by introducing transparency.</li> <li>While pondering I found that GL library by default uses the Unlit material provided by Unity to create the lines.</li> <li>As the Unlit Material doesn’t support transparency by default, I wrote an Unlit Shader that supported both transparency and vertex colors.</li> <li>The RGBA values of the colors of the material based upon this shader was passed as an input.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">GL</span><span class="p">.</span><span class="nf">Begin</span><span class="p">(</span><span class="n">GL</span><span class="p">.</span><span class="n">LINES</span><span class="p">);</span>
<span class="n">lineMat</span><span class="p">.</span><span class="nf">SetPass</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
<span class="n">GL</span><span class="p">.</span><span class="nf">Color</span><span class="p">(</span><span class="k">new</span> <span class="nf">Color</span><span class="p">(</span><span class="n">lineMat</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">r</span><span class="p">,</span>
<span class="n">lineMat</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">g</span><span class="p">,</span>
<span class="n">lineMat</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">b</span><span class="p">,</span>
<span class="n">lineMat</span><span class="p">.</span><span class="n">color</span><span class="p">.</span><span class="n">a</span><span class="p">));</span></code></pre></figure> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/TRays.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/TRays.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/TRays.gif-1400.webp"/> <img src="/assets/img/TRays.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> With transparency controls, the rays looked more natural. </div> <h4 id="13-environment-lighting">1.3 Environment Lighting</h4> <ul> <li>The next step would be to make the scene react to the light rays emitted by the player.</li> <li>This involved two steps-</li> </ul> <ol> <li>Making the light ray stop when it hits an object. This is done by Raycasting along the light rays that GL draws and checking if we’ve hit something.</li> </ol> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">RaycastHit2D</span> <span class="n">hit</span> <span class="p">=</span> <span class="n">Physics2D</span><span class="p">.</span><span class="nf">Raycast</span><span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span>
<span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="n">Mathf</span><span class="p">.</span><span class="nf">Cos</span><span class="p">(</span><span class="n">i</span> <span class="p">*</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Deg2Rad</span><span class="p">),</span>
<span class="n">Mathf</span><span class="p">.</span><span class="nf">Sin</span><span class="p">(</span><span class="n">i</span> <span class="p">*</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Deg2Rad</span><span class="p">)),</span>
<span class="n">maxVisiblityDistance</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="n">hit</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">GL</span><span class="p">.</span><span class="nf">Vertex3</span><span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
    <span class="n">GL</span><span class="p">.</span><span class="nf">Vertex3</span><span class="p">(</span><span class="n">hit</span><span class="p">.</span><span class="n">point</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">hit</span><span class="p">.</span><span class="n">point</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">else</span>
<span class="p">{</span>
    <span class="n">GL</span><span class="p">.</span><span class="nf">Vertex3</span><span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
    <span class="n">GL</span><span class="p">.</span><span class="nf">Vertex3</span><span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="p">+</span>
    <span class="n">Mathf</span><span class="p">.</span><span class="nf">Cos</span><span class="p">(</span><span class="n">i</span> <span class="p">*</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Deg2Rad</span><span class="p">)*</span> <span class="n">maxVisiblityDistance</span><span class="p">,</span>
    <span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span>
    <span class="n">Mathf</span><span class="p">.</span><span class="nf">Sin</span><span class="p">(</span><span class="n">i</span> <span class="p">*</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Deg2Rad</span><span class="p">)*</span> <span class="n">maxVisiblityDistance</span><span class="p">,</span>
    <span class="m">0</span><span class="p">);</span>
<span class="p">}</span> </code></pre></figure> <ol> <li>Making the sprite color of the object depend upon its distance from the light source.</li> </ol> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">SpriteRenderer</span> <span class="n">sp</span> <span class="p">=</span> <span class="n">hit</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">SpriteRenderer</span><span class="p">&gt;();</span>
<span class="k">if</span> <span class="p">(</span><span class="n">sp</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">sp</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Color</span><span class="p">(</span><span class="m">1</span> <span class="p">/</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Pow</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Distance</span><span class="p">(</span>
        <span class="n">hit</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">),</span>
        <span class="m">1.5f</span><span class="p">),</span>
        <span class="m">1</span> <span class="p">/</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Pow</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Distance</span><span class="p">(</span><span class="n">hit</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">,</span> <span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">),</span>
        <span class="m">1.5f</span><span class="p">),</span>
        <span class="m">1</span> <span class="p">/</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Pow</span><span class="p">(</span><span class="n">Vector3</span><span class="p">.</span><span class="nf">Distance</span><span class="p">(</span><span class="n">hit</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span> <span class="n">position</span><span class="p">,</span> <span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span> <span class="n">position</span><span class="p">),</span>
        <span class="m">1.5f</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2dlightsys.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2dlightsys.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2dlightsys.gif-1400.webp"/> <img src="/assets/img/2dlightsys.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Final Output </div> <h4 id="14-2d-raycaster-gl---2nd-iteration">1.4 2D Raycaster (GL) - 2nd iteration</h4> <ul> <li>The previous method for generating rays was very inefficient with time complexity of O(n) as the loop had to run 3600 times every frame with a step size of 0.1.</li> <li>This issue was solved by detecting the edges of nearby objects and casting rays at them and then filling the space by generating mesh between them.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="kt">int</span> <span class="n">numRays</span> <span class="p">=</span> <span class="n">Caster</span><span class="p">.</span><span class="n">LightContour</span><span class="p">.</span><span class="n">Count</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span>
<span class="n">LightMesh</span><span class="p">.</span><span class="n">mesh</span><span class="p">.</span><span class="n">vertices</span> <span class="p">=</span> <span class="n">Caster</span><span class="p">.</span> <span class="n">LightContour</span><span class="p">.</span> <span class="nf">ToArray</span><span class="p">();</span>
<span class="kt">int</span><span class="p">[]</span> <span class="n">triangles</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">numRays</span> <span class="p">*</span> <span class="m">3</span><span class="p">];</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">numRays</span> <span class="p">*</span> <span class="m">3</span><span class="p">;</span> <span class="n">i</span> <span class="p">+=</span> <span class="m">3</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">triangles</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="n">i</span> <span class="p">/</span> <span class="m">3</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">%</span> <span class="n">numRays</span><span class="p">;</span>
<span class="n">triangles</span><span class="p">[</span><span class="n">i</span> <span class="p">+</span> <span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="n">numRays</span><span class="p">;</span>
<span class="n">triangles</span><span class="p">[</span><span class="n">i</span> <span class="p">+</span> <span class="m">2</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="n">i7</span> <span class="m">3</span> <span class="p">+</span> <span class="m">2</span><span class="p">)</span> <span class="p">%</span> <span class="n">numRays</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">LightMesh</span><span class="p">.</span><span class="n">mesh</span><span class="p">.</span><span class="n">triangles</span> <span class="p">=</span> <span class="n">triangles</span><span class="p">;</span></code></pre></figure> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2dmeshlightsys.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2dmeshlightsys.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2dmeshlightsys.gif-1400.webp"/> <img src="/assets/img/2dmeshlightsys.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Final Output </div> <p><strong>This 2D lighting system that I incorporated in the project was implemented by Unity in the later versions as a Package in URP Render Pipeline.</strong></p> <h4 id="20-environment-reflection">2.0 Environment Reflection</h4> <ul> <li>Two players (each with their own top down camera) were added in either sides of the map separated by a box collider.</li> <li>The screen was split into two (one for each camera) by decreasing the width of the both camera’s viewport rect to 0.5 and offsetting one of them to 0.5.</li> </ul> <h4 id="30-player-movement">3.0 Player Movement</h4> <ul> <li>A simple rigidbody top down controller was yoinked from one of Brackeys tutorials for the first player while the movement of the second player was made to be governed by that of the first player’s.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">=</span> <span class="n">player</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">*</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(-</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure> <ul> <li>This inverts the movement of the second player horizontally (lateral inversion) as if their movements were mirrored.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/inversion.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/inversion.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/inversion.gif-1400.webp"/> <img src="/assets/img/inversion.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="31-player-sprites--animations">3.1 Player Sprites &amp; Animations</h4> <ul> <li>Two sprite sheets of the top-down view of a male &amp; female character (drawn by one of my teammates) walking were imported into the game.</li> <li>These sprites were split into frames for animation using Unity’s inbuilt sprite editor.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/BoySprite-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/BoySprite-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/BoySprite-1400.webp"/> <img src="/assets/img/BoySprite.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Boy Sprite Sheet </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/GirlSprite-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/GirlSprite-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/GirlSprite-1400.webp"/> <img src="/assets/img/GirlSprite.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Girl Sprite Sheet </div> </div> </div> <ul> <li>These were animated at 10 fps.</li> <li>The controller was tweaked to support both animation and smooth rotation of the player sprites.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">movement</span> <span class="p">=</span> <span class="n">Vector2</span><span class="p">.</span><span class="n">zero</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Horizontal"</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
        <span class="n">movement</span><span class="p">.</span><span class="n">x</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Horizontal"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Vertical"</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
        <span class="n">movement</span><span class="p">.</span><span class="n">y</span> <span class="p">=</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Vertical"</span><span class="p">);</span>

    <span class="nf">AnimatorEnable</span><span class="p">();</span>

    <span class="n">Vector2</span> <span class="n">movedir</span> <span class="p">=</span> <span class="n">rb</span><span class="p">.</span> <span class="n">position</span> <span class="p">-</span> <span class="n">prevpos</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">movedir</span><span class="p">.</span><span class="n">magnitude</span><span class="p">*</span><span class="m">100</span> <span class="p">&gt;</span> <span class="m">1</span><span class="p">)</span>
        <span class="n">sprite</span><span class="p">.</span> <span class="n">transform</span><span class="p">.</span><span class="n">rotation</span> <span class="p">=</span> <span class="n">Quaternion</span><span class="p">.</span> <span class="nf">Lerp</span><span class="p">(</span><span class="n">sprite</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">rotation</span><span class="p">,</span>
        <span class="n">Quaternion</span><span class="p">.</span><span class="nf">Euler</span><span class="p">(</span><span class="m">0</span><span class="p">,</span>
        <span class="m">0</span><span class="p">,</span>
        <span class="n">Mathf</span><span class="p">.</span><span class="n">Rad2Deg</span> <span class="p">*</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Atan2</span><span class="p">(</span><span class="n">movedir</span><span class="p">.</span><span class="n">y</span> <span class="p">*</span> <span class="m">100</span><span class="p">,</span> <span class="n">movedir</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="m">100</span><span class="p">)</span> <span class="p">-</span> <span class="m">90</span><span class="p">),</span>
        <span class="n">rotSpeed</span><span class="p">*</span><span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">FixedUpdate</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">rb</span><span class="p">.</span><span class="nf">MovePosition</span><span class="p">(</span><span class="n">rb</span><span class="p">.</span><span class="n">position</span> <span class="p">+</span> <span class="n">movement</span><span class="p">.</span><span class="n">normalized</span> <span class="p">*</span> <span class="n">speed</span><span class="p">);</span>
    <span class="n">prevpos</span> <span class="p">=</span> <span class="n">rb</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">AnimatorEnable</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Horizontal"</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span> <span class="p">||</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Vertical"</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
        <span class="n">GetComponentInchildren</span><span class="p">&lt;</span><span class="n">Animator</span><span class="p">&gt;().</span><span class="nf">Play</span><span class="p">(</span><span class="s">"PlayerWalk"</span><span class="p">);</span>
    <span class="k">else</span>
        <span class="n">GetComponentInChildren</span><span class="p">&lt;</span><span class="n">Animator</span><span class="p">&gt;().</span><span class="nf">Play</span><span class="p">(</span><span class="s">"New State"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure> <ul> <li>The translation is governed by Unity’s Physics engine (using rigidbodies) and is executed in the <code class="language-plaintext highlighter-rouge">FixedUpdate()</code> method to keep it independent of frame rate.</li> <li>The rotation of the sprite changes with its direction (governed by the combination of vertical and horizontal input).</li> <li>The translation and rotation speed is parametrically controlled by <code class="language-plaintext highlighter-rouge">speed</code> and <code class="language-plaintext highlighter-rouge">rotSpeed</code> variable exposed in the inspector.</li> <li>The animation is simply enabled if we’re sending an input, else it stays disabled.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Sprites.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Sprites.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Sprites.gif-1400.webp"/> <img src="/assets/img/Sprites.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="40-button-mechanic">4.0 Button Mechanic</h4> <p>We decided to come up with a button mechanic system. The idea was to spawn two buttons (one in each world) and the player was expected to walk over both the buttons simultaneously to open the gates so that he can people can proceed to the next level.</p> <ul> <li>When the player walked over a button, the button’s sprite renderer glowed.</li> <li>Also, an event was called to check if the other button is pressed as well.</li> <li>If the other button was pressed, the gates (which were hinged at their corner) would rotate and the player could pass through them.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Buttons.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Buttons.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Buttons.gif-1400.webp"/> <img src="/assets/img/Buttons.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="50-movable-objects">5.0 Movable Objects</h4> <p>To add more depth to the puzzles, we decided to come up with a few objects that the players could push in order to block or press something.</p> <ul> <li>A physics material (with high coefficient of friction value &amp; 0 bounciness) is created.</li> <li>Sprites for movable objects (with hand-drawn texture maps by one of the teammates) are imported.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/crate-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/crate-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/crate-1400.webp"/> <img src="/assets/img/crate.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Crate Base Map </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/cratenormal-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/cratenormal-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/cratenormal-1400.webp"/> <img src="/assets/img/cratenormal.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Crate Normal Map </div> </div> </div> <ul> <li>These textures are assigned to the URP’s default lit sprite material.</li> <li>Their prefabs are created with Box Collider 2D &amp; Rigidbody 2D components having the physics material assigned to them.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Pushable.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Pushable.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Pushable.gif-1400.webp"/> <img src="/assets/img/Pushable.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="60-death-mechanic">6.0 Death Mechanic</h4> <p>We decided to include spikes in the game. They would kill the players on contact, rendering few areas of the game as unapproachable. The death animations and effect were kept as brutal and gross (taking inspiration from Limbo) to add to the dark atmosphere of the game.</p> <ul> <li>Colliders were set up on the spikes (with ‘Death’ tag) and the player.</li> <li>If the player comes in contact with the spike a Coroutine containing all the relevant methods for death of the player is called.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="k">private</span> <span class="k">void</span> <span class="nf">onCollisionEnter2D</span><span class="p">(</span><span class="n">Collision2D</span> <span class="n">collision</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">collision</span><span class="p">.</span><span class="n">gameObject</span><span class="p">.</span><span class="nf">CompareTag</span><span class="p">(</span><span class="s">"Death"</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">dead</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span> 
        <span class="nf">StartCoroutine</span><span class="p">(</span><span class="nf">Death</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure> <h4 id="61-spike-texture">6.1 Spike Texture</h4> <ul> <li>Since our core idea was to make the game atmospheric &amp; appealing to eyes we wanted to keep environment ques pretty detailed. We decided to do the same with the spikes.</li> <li>The spike texture maps were hand-drawn by one of the teammates. We had initially thought of including a height/bump map but later replaced it with a normal map.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/spikes-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/spikes-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/spikes-1400.webp"/> <img src="/assets/img/spikes.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Spike Base Map </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SpikesNormal-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SpikesNormal-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SpikesNormal-1400.webp"/> <img src="/assets/img/SpikesNormal.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Spike Normal Map </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/spike%20height-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/spike%20height-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/spike%20height-1400.webp"/> <img src="/assets/img/spike%20height.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Spike Height Map </div> </div> </div> <ul> <li>These textures are assigned to the URP’s default lit sprite material.</li> </ul> <h4 id="62-death-animation">6.2 Death Animation</h4> <ul> <li>A sprite sheet for hand-drawn animation of blood splash was imported.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/BloodSplash-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/BloodSplash-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/BloodSplash-1400.webp"/> <img src="/assets/img/BloodSplash.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>This sprite sheet was played on collision with the spikes.</li> <li>The movement state of the players were changed from animated to static.</li> <li>The movement vector of the players were overridden to be zero.</li> <li>The canvas was fade out to black and the level was reloaded.</li> </ul> <figure class="highlight"><pre><code class="language-c#" data-lang="c#"><span class="n">IEnumerator</span> <span class="nf">Death</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">bloodsplash</span><span class="p">.</span><span class="nf">SetActive</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
    <span class="n">dead</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span> <span class="n">GetComponentInChildren</span><span class="p">&lt;</span><span class="n">Animator</span><span class="p">&gt;().</span><span class="nf">Play</span><span class="p">(</span><span class="s">"Static"</span><span class="p">);</span>
    <span class="n">movement</span> <span class="p">=</span> <span class="n">Vector3</span><span class="p">.</span><span class="n">zero</span><span class="p">;</span>
    <span class="n">GameObject</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="s">"CanvasGame"</span><span class="p">).</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Animator</span><span class="p">&gt;().</span><span class="nf">Play</span><span class="p">(</span><span class="s">"FadeOut"</span><span class="p">);</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForSeconds</span><span class="p">(.</span><span class="m">7f</span><span class="p">);</span>
    <span class="n">SceneManager</span><span class="p">.</span><span class="nf">LoadScene</span><span class="p">(</span><span class="n">SceneManager</span><span class="p">.</span><span class="nf">GetActiveScene</span><span class="p">().</span><span class="n">name</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/death2opp.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/death2opp.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/death2opp.gif-1400.webp"/> <img src="/assets/img/death2opp.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Final Output </div> <h4 id="70-level-design">7.0 Level Design</h4> <p>The biggest challenge ahead of us was actually to come up with a level design that would keep the people engaged till the end of the game and not feel tiring at the same time (Since atmospheric games heavily rely on the level design). As the game was a submission to a gamejam we decided to keep the total play time around 10-15 minutes.</p> <h4 id="71-initial-levels">7.1 Initial levels</h4> <ul> <li>The key concept of an accessible game design is to keep the initial levels of the game feel more like tutorials that help people stumble upon the core mechanics and gameplay features that game has to offer.</li> <li>The challenge with atmospheric though is that they can’t give away much visual cues about the game, the player is expected to explore and find it himself. But again, the game was a part of a game jam submission wherein the attention span of the players playing the game is quite small, so keeping things extremely vague might lead to less player retention. So we decided a sweet spot in between them.</li> <li>The game started with a WSAD key sprite I made using Adobe XD fading into the scene giving the player idea of the controls.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/WSADGame-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/WSADGame-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/WSADGame-1400.webp"/> <img src="/assets/img/WSADGame.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Key Sprite in Game </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/WSADXD-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/WSADXD-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/WSADXD-1400.webp"/> <img src="/assets/img/WSADXD.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Key Sprite made in Adobe XD </div> </div> </div> <ul> <li>An arrow sprite was made using Photoshop which was spawned in the game’s first level to guide directions to the gate that next level. These arrows were spawned if the player exceeded a certain threshold time to reach the gates.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/ArrowGame-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/ArrowGame-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/ArrowGame-1400.webp"/> <img src="/assets/img/ArrowGame.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Arrow Sprite in Game </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/ArrowPS-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/ArrowPS-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/ArrowPS-1400.webp"/> <img src="/assets/img/ArrowPS.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Arrow Sprite made in Photoshop </div> </div> </div> <ul> <li>This level was kept simple and most importantly symmetric. The players were just expected to roam around, get familiar with the inversion mechanic and the gates that would progress them to the next level.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Lev1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Lev1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Lev1-1400.webp"/> <img src="/assets/img/Lev1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The first challenge was introduced in the next level as the it was kept asymmetric. Now players needed to figure out a way to make both the characters back in sync with each other so that they reach the gates.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Lev2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Lev2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Lev2-1400.webp"/> <img src="/assets/img/Lev2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The third level introduced the button mechanic in the game. The gates are kept locked and the players are expected to align both the characters over the button simultaneously to unlock the game. The player would use the same method he used to sync both the characters in the previous level as the outline of both the levels is kept the same.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Lev3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Lev3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Lev3-1400.webp"/> <img src="/assets/img/Lev3.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="72-later-levels">7.2 Later Levels</h4> <ul> <li>The difficulty for the game was now gradually increased and the game now focused more on the player creatively finding out a way to solve the puzzles rather than teaching the player how to play.</li> <li>For the next level, the the button for one of the characters was spawned right next to him. Our solution to this was locking one of the players in the slots next to the button while the other traveled to his button. To our surprise the players came up with various other solutions to this puzzle too (This is true in the case of the subsequent levels as well).</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Lev4-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Lev4-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Lev4-1400.webp"/> <img src="/assets/img/Lev4.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The next level had both the puzzles on different vertical levels but symmetric to each other.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Lev5-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Lev5-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Lev5-1400.webp"/> <img src="/assets/img/Lev5.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Now that the player knew how to sync the characters and solve the puzzles in both vertical and horizontal directions, it was now the time to introduce the spikes into the level. So the next was similar to the previous one except for the addition of spikes on some of the walls. This limited the areas that the player could explore to solve the puzzle.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Lev6-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Lev6-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Lev6-1400.webp"/> <img src="/assets/img/Lev6.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The next level drastically increased the difficulty of the game by introducing a maze like map with the buttons at the end of the maze and spikes on a few of the walls. Lots of players exclaimed about getting stuck on this level.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Lev7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Lev7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Lev7-1400.webp"/> <img src="/assets/img/Lev7.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>Now the players were introduced to the movable boxes that were to be strategically used to solve the puzzles.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Lev8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Lev8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Lev8-1400.webp"/> <img src="/assets/img/Lev8.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The next few levels combined the usage of both box and spikes along with maze-like level designs.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Lev9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Lev9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Lev9-1400.webp"/> <img src="/assets/img/Lev9.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The final level involved a cliffhanger ending followed by the credit screen. Play the game to know more ;)</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/LevFin-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/LevFin-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/LevFin-1400.webp"/> <img src="/assets/img/LevFin.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="80-post-processing">8.0 Post Processing</h4> <p>We used post processing to increase the immersion that the game offers. We decided to limit ourselves to the stack that were well optimized for WebGL builds.</p> <ul> <li>Lens distortion and Chromatic Aberration were added to the images rendered by the camera a more natural. This causes the shape of the images rendered by the camera to distort at the edges and thus increase the focus of the environment in proximity of both the players.</li> <li>We had planned on adding Bloom as well but since we weren’t Unity’s lighting system we would have to write the Bloom system for our lighting system. Due to deadlines for the gamejam approaching, we decided to shelve the idea.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/PP.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/PP.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/PP.gif-1400.webp"/> <img src="/assets/img/PP.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="91-font">9.1 Font</h4> <ul> <li>We browsed through a bunch of hand-drawn fonts for the game’s UI.</li> <li>We shortlisted to Architects Daughter, Amatic, and Blokletters and finally finalized Amatic.</li> <li>The color palette was kept limited and preferably lerped between black and white.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/amatic-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/amatic-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/amatic-1400.webp"/> <img src="/assets/img/amatic.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="92-animations">9.2 Animations</h4> <ul> <li>The animations were kept minimal - fading, scaling, and translations.</li> <li>A canvas with black panel was used as an overlay and it was used for fading transitions between different scenes and menus.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/menuanim.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/menuanim.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/menuanim.gif-1400.webp"/> <img src="/assets/img/menuanim.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Main Menu </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/pausemenu.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/pausemenu.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/pausemenu.gif-1400.webp"/> <img src="/assets/img/pausemenu.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Pause Menu </div> </div> </div> <h3 id="93-intro-clip">9.3 Intro clip</h3> <p>We created a small clip using Unity’s timeline as with the text only, the menu seemed a little lifeless. Again, minimalism and dark atmosphere were the key.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/mainmenu.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/mainmenu.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/mainmenu.gif-1400.webp"/> <img src="/assets/img/mainmenu.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="94-music--sound-effects">9.4 Music &amp; Sound Effects</h3> <ul> <li>Simple sound effects imported from <a href="https://www.zapsplat.com/">ZapSplat</a> were used to for clicks, death, button press, gates and various other purposes.</li> <li>A <a href="https://www.youtube.com/watch?v=E3yKY6D7j_M">free for profit sad piano beat</a> by Loud Jezze was used as the background track.</li> <li>Drawing cues from Minecraft, the soundtrack was played whenever the game became intense.</li> <li>The soundtrack was played one of four timestamps so that it doesn’t feel repetitive.</li> <li>Also, with each scene, the soundtrack’s instance was destroyed if it was already playing to avoid multiple instances.</li> <li>The soundtracks were muffled in the menus.</li> </ul>]]></content><author><name></name></author><category term="blog"/><category term="unity3d"/><category term="2dlighting"/><category term="brackeys"/><summary type="html"><![CDATA[this blog shows the thought & development process behind Two Opposites- especially the 2D lighting system I wrote (adopted by Unity in the later versions)]]></summary></entry><entry><title type="html">Work at FIEA (Summer) - Documented!</title><link href="https://alfolio.github.io/docs/2022/soul-shard/" rel="alternate" type="text/html" title="Work at FIEA (Summer) - Documented!"/><published>2022-11-14T11:00:00+00:00</published><updated>2022-11-14T11:00:00+00:00</updated><id>https://alfolio.github.io/docs/2022/soul-shard</id><content type="html" xml:base="https://alfolio.github.io/docs/2022/soul-shard/"><![CDATA[<p>Soul Shard is a cooperative puzzle platformer that draws inspiration from EA’s ‘It Takes Two’. It is being developed by <a href="https://www.19soulsonboard.com/about">19 Souls on Board</a>, a team of 19 student developers from Cohort 18 at the Florida Interactive Entertainment Academy on the downtown campus of the University of Central Florida. I’m assisting the team as a technical artist this summer.</p> <ul> <li>The development update to the game can be viewed <a href="https://www.youtube.com/watch?v=0S1EbyBRVhw">here</a>.</li> <li>The repository containing my contributions to the project can be found <a href="https://github.com/19SOB/ucf-fiea-19sob-capstone-project-temp">here</a>.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SoulShard%20(2)-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SoulShard%20(2)-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SoulShard%20(2)-1400.webp"/> <img src="/assets/img/SoulShard%20(2).png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Soul Shard Poster </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/19SOB-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/19SOB-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/19SOB-1400.webp"/> <img src="/assets/img/19SOB.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> 19 Souls on Board Logo </div> </div> </div> <h4 id="10-smoke-system">1.0 Smoke System</h4> <p>My first task was to design and develop a stylized explosive smoke particles for various machinery and explosions in the game. The basic idea was to develop a functional prototype and then refine it in the iterative design process.</p> <h4 id="11-cloud-texture">1.1 Cloud Texture</h4> <p>Initially, I designed various cloud textures with separate RGB channels for Base Color, Emmisivity and Opacity Mask.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/CloudRGB-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/CloudRGB-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/CloudRGB-1400.webp"/> <img src="/assets/img/CloudRGB.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="12-smoke-material">1.2 Smoke Material</h4> <ul> <li>The smoke material was made using these textures.</li> <li>The emmisivity and particle colors were exposed for editing while making the particles.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/CloudMat-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/CloudMat-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/CloudMat-1400.webp"/> <img src="/assets/img/CloudMat.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="13-smoke-particles---1st-iteration">1.3 Smoke Particles - 1st iteration</h4> <ul> <li>The smoke particles were made using the Niagara VFX system.</li> <li>The particles (100) were made to spawn in a burst around a cylinder with an initial velocity radially outwards.</li> <li>A positive gravitational force was added to make the particles rise with a drag coefficient to smoothen things and make it feel natural.</li> <li>Individual particles also received rotation in addition to a colour (the exposed parameter) that was lerped from grey to black.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Smoke1.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Smoke1.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Smoke1.gif-1400.webp"/> <img src="/assets/img/Smoke1.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="14-smoke-particles---2nd-iteration">1.4 Smoke Particles - 2nd iteration</h4> <ul> <li>A light renderer was added to the particles to further intricately define the explosion.</li> <li>The light renderer was started off at the same initial position as the smoke particles.</li> <li>The intensity was lerped from 100 to 0.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Smoke2.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Smoke2.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Smoke2.gif-1400.webp"/> <img src="/assets/img/Smoke2.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="15-debris-texture">1.5 Debris Texture</h4> <p>The debris texture was made in photoshop using online reference images and the brush tool.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/DebrisTex-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/DebrisTex-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/DebrisTex-1400.webp"/> <img src="/assets/img/DebrisTex.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="16-debris-material">1.6 Debris Material</h4> <p>The debris material was created using the debris texture in a similar fashion to the smoke material.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/DebrisMat-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/DebrisMat-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/DebrisMat-1400.webp"/> <img src="/assets/img/DebrisMat.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="17-smoke-particles---3rd-iteration">1.7 Smoke Particles - 3rd iteration</h4> <ul> <li>The debris particle was given the same parameters as the smoke particle.</li> <li>Since the debris appeared lighter, the drag was reduced and gravitational force (positive) was raised to increase the spread.</li> <li>Apart from that, a fountain emitter was assigned the same debris material to make the spread look more abrupt.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Smoke3.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Smoke3.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Smoke3.gif-1400.webp"/> <img src="/assets/img/Smoke3.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="18-spark-texture">1.8 Spark Texture</h4> <p>The spark texture with separate RGB channels was obtained online.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Spark-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Spark-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Spark-1400.webp"/> <img src="/assets/img/Spark.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="19-spark-material">1.9 Spark Material</h4> <ul> <li>The spark material was made using the spark texture.</li> <li>The blue channel was used as the opacity mask.</li> <li>The emmisive color was obtained after combining red and yellow.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SparkMat-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SparkMat-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SparkMat-1400.webp"/> <img src="/assets/img/SparkMat.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="110-smoke-particles---final-iteration">1.10 Smoke Particles - Final iteration</h4> <ul> <li>The spark particles were given the same parameter as the debris particle, i.e. a higher spread emitter and a fountain emitter.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Smoke4.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Smoke4.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Smoke4.gif-1400.webp"/> <img src="/assets/img/Smoke4.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="111-other-variations">1.11 Other Variations</h4> <p>Few other variations of the smoke system.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Smoke5.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Smoke5.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Smoke5.gif-1400.webp"/> <img src="/assets/img/Smoke5.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Less stylized system </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Smoke6.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Smoke6.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Smoke6.gif-1400.webp"/> <img src="/assets/img/Smoke6.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Debris only system </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Smoke7.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Smoke7.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Smoke7.gif-1400.webp"/> <img src="/assets/img/Smoke7.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Puff system </div> </div> </div> <h4 id="20-flame-system">2.0 Flame system</h4> <p>My subsequent task was to design &amp; develop flame systems for different purposes like burning coal, chimneys, explosion, etc.</p> <h4 id="21-noise-texture">2.1 Noise Texture</h4> <p>A stylized noise texture was created to serve as the opacity mask for the flame material.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NoiseTex-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NoiseTex-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NoiseTex-1400.webp"/> <img src="/assets/img/NoiseTex.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="22-flame-material">2.2 Flame Material</h4> <ul> <li>Parametrically controlled texture coordinate was masked to obtain a controllable gradient. The value is clamped between 0 and 1 to prevent excessive bleeding.</li> <li>The noise texture was added to give fire-like shape to the mask.</li> <li>The UV map of the texture was given a panner (with texture coordinate as input) to animate it, depicting a burning fire.</li> <li>A RadialGradientExponential (with texture coordinate as input) was subtracted from the mask to prevent square edges.</li> <li>The tiling, erosion &amp; color of the material were exposed as dynamic parameters to be controlled by the Niagara system.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FlameMat.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FlameMat.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FlameMat.gif-1400.webp"/> <img src="/assets/img/FlameMat.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="23-flame-particles---1st-iteration">2.3 Flame Particles - 1st iteration</h4> <ul> <li>Majorly, the structure of flame system was completed during the formation of material itself.</li> <li>The sprites were spawned in a circular grid with different rotations to give a 3D look.</li> <li>The color was lerped between yellow and red.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FlameVFX.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FlameVFX.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FlameVFX.gif-1400.webp"/> <img src="/assets/img/FlameVFX.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="24-flame-mesh">2.4 Flame mesh</h4> <p>The flame system previously made was disapproved by the team for being too toony and not matching the game tone setting. So I decided to replace the sprite based particle system to a mesh one. I modeled an icoshpere mesh with decimate modifier for this purpose to provide randomness.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FlameMesh-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FlameMesh-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FlameMesh-1400.webp"/> <img src="/assets/img/FlameMesh.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="25-flame-material">2.5 Flame material</h4> <p>The flame material was created simply by assigning the particle color input to the emmisive color of the material so that we can assign it later in the emmiter itself.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FlameMat-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FlameMat-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FlameMat-1400.webp"/> <img src="/assets/img/FlameMat.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="26-flame-particles---final-iteration">2.6 Flame Particles - Final iteration</h4> <ul> <li>A fountain based emitter is used after removing gravity, cone velocity, drag and scaleColor just retaining the initial properties.</li> <li>The default sprite renderer is replaced with a mesh renderer and the icosphere and the flame material we created is assigned.</li> <li>The particles were assigned a random vertical velocity so that variance in the fire’s peak giving it a natural eye.</li> <li>They’re scaled down in size as they reach up to give an inverted conical shape by using bezier curves to keep the transition smooth.</li> <li>The color is lerped between yellow and red with the lifetime of the particle.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FlameVFX2.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FlameVFX2.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FlameVFX2.gif-1400.webp"/> <img src="/assets/img/FlameVFX2.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="30-footprint-system">3.0 Footprint System</h4> <p>Further I was assigned the task to develop a snow-based footprint system over snow for the main characters (Ambrose and Nimue).</p> <h4 id="31-footprint-sprites---1st-iteration">3.1 Footprint Sprites - 1st iteration</h4> <ul> <li>I used a snow texture which I found online to make the footprint sprites.</li> <li>The foot impressions of the right foot of both the characters were traced using the pen tool and the texture was masked to make the footprint sprites.</li> <li>The left footprint sprite was simply made by inverting the image horizontally.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/AmbroseFI-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/AmbroseFI-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/AmbroseFI-1400.webp"/> <img src="/assets/img/AmbroseFI.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Ambrose Foot Impression </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NimueFI-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NimueFI-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NimueFI-1400.webp"/> <img src="/assets/img/NimueFI.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Nimue Foot Impression </div> </div> </div> <div class="caption"> Foot Impressions </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/AmbroseFPS1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/AmbroseFPS1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/AmbroseFPS1-1400.webp"/> <img src="/assets/img/AmbroseFPS1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Ambrose Footprint Sprite </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NimueFPS1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NimueFPS1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NimueFPS1-1400.webp"/> <img src="/assets/img/NimueFPS1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Nimue Footprint Sprite </div> </div> </div> <div class="caption"> Footprint Sprites </div> <h4 id="32-footprint-material---1st-iteration">3.2 Footprint Material - 1st iteration</h4> <ul> <li>The material used for the footprints was a deferred decal material with blending mode set to translucent so that you can apply it as a decal.</li> <li>The alpha of the texture/sprite was assigned to the opacity of the material and the RGB values to the base color.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FPMat1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FPMat1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FPMat1-1400.webp"/> <img src="/assets/img/FPMat1.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="33-footprint-blueprint">3.3 Footprint Blueprint</h4> <ul> <li>An actor blueprint is created for both left and right footprints.</li> <li>A decal facing downwards with the footprint material is added as the child to the DefaultSceneRoot.</li> <li>The decal is made to fade away gradually after 5 seconds.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FPBP-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FPBP-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FPBP-1400.webp"/> <img src="/assets/img/FPBP.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="34-adding-to-the-third-person-blueprint">3.4 Adding to the third person blueprint</h4> <ul> <li>I used the default third person character provided by Unreal to playtest the footprints.</li> <li>In the TPC blueprint, planes are added as a child of the mesh and the respective foot as the parent socket so that it snaps perfectly with the foot’s movement.</li> <li>The planes are rendered as invisible (hidden in game), events are prevented from overlapping, and collisions are disabled as they’re just meant for spawn reference to the footprints.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/TPBP-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/TPBP-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/TPBP-1400.webp"/> <img src="/assets/img/TPBP.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="35-animation-notifier">3.5 Animation Notifier</h4> <ul> <li>Animation notifiers are added for each footprint to spawn at the appropriate time in the running animation.</li> <li>In the third person animation blueprint’s event graph, a character reference is set and cast to the third person character as the blueprint awakes.</li> <li>In the third person character blueprint’s event graph, two new custom events are introduced to spawn the footprints.</li> <li>The event is meant to spawn an actor from the footprint class we created earlier.</li> <li>The foot reference is assigned to the spawn location.</li> <li>The actor rotation is assigned to the spawn rotation.</li> <li>The spawn scale was decided after playtesting.</li> <li>The custom events are assigned to the animation notifier in the third person animation blueprint’s event graph.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/AnimNoti.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/AnimNoti.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/AnimNoti.gif-1400.webp"/> <img src="/assets/img/AnimNoti.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Adding run animation notifier </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/TPAnimBP-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/TPAnimBP-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/TPAnimBP-1400.webp"/> <img src="/assets/img/TPAnimBP.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Third person animation event graph </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/TPCharBP-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/TPCharBP-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/TPCharBP-1400.webp"/> <img src="/assets/img/TPCharBP.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Third person character event graph </div> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FP1.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FP1.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FP1.gif-1400.webp"/> <img src="/assets/img/FP1.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> First Output </div> <h4 id="36-footprint-sprites---final-iteration">3.6 Footprint Sprites - Final iteration</h4> <p>The team pinpointed that the current footprint lacked originality as snow footprints are generally a little darker (dark grey/blue) with blue tint on the edges. Apart from this, they suggested to add normal information to the footprints aswell.</p> <ul> <li>I decreased the exposure of the textures, added bluish tint on the edges using the brush (Chalk 2) tool.</li> <li>Further, I generated the normals using the inbuilt 3D tools provided in Photoshop. (which turned out to be one of my most laggy workflow experiences with Photoshop).</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/AmbroseFPS2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/AmbroseFPS2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/AmbroseFPS2-1400.webp"/> <img src="/assets/img/AmbroseFPS2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> New Ambrose Footprint Texture </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NimueFPS2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NimueFPS2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NimueFPS2-1400.webp"/> <img src="/assets/img/NimueFPS2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> New Nimue Footprint Texture </div> </div> </div> <div class="caption"> Footprint Textures/Sprites </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/AmbroseFPN-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/AmbroseFPN-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/AmbroseFPN-1400.webp"/> <img src="/assets/img/AmbroseFPN.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Ambrose footprint normal </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/NimueFPN-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/NimueFPN-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/NimueFPN-1400.webp"/> <img src="/assets/img/NimueFPN.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Nimue footprint normal </div> </div> </div> <div class="caption"> Footprint Normals </div> <h4 id="37-footprint-material---final-iteration">3.7 Footprint Material - Final iteration</h4> <p>The footprint material was modified to support normal information and the normal map textures generated were assigned.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FPMat2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FPMat2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FPMat2-1400.webp"/> <img src="/assets/img/FPMat2.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FP2.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FP2.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FP2.gif-1400.webp"/> <img src="/assets/img/FP2.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Final Output </div> <h4 id="40-snowstorm-system">4.0 Snowstorm System</h4> <p>My next task was to design and develop a snowstorm system for the yard area. I was provided with a <a href="https://www.shutterstock.com/video/clip-1058627680-dense-heavy-blizzard-snowstorm-vfx-insert-slow-motion">reference video</a> for the same.</p> <h4 id="41-snow-particles">4.1 Snow Particles</h4> <ul> <li>I found this task quite easy and felt that simply a fountain emitter with the default particle renderer would do the trick.</li> <li>So, I created a fountain emitter and inverted its initial velocity to make the particles fall downwards instead of upwards.</li> <li>The particles were made to spawn around a big sphere.</li> <li>The trajectory cone’s apex angle was increased as well to increase the spread of the particles.</li> <li>The gravity was decreased and drag was increased to make the snowfall appear more genuine.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Snow1.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Snow1.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Snow1.gif-1400.webp"/> <img src="/assets/img/Snow1.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="42-wind-material">4.2 Wind Material</h4> <p>As I had anticipated, I was suggested to add more depth to the snowstorm. The idea was to make the snow more dramatic by introducing a wind system. They provided a <a href="https://www.youtube.com/watch?v=sGkh1W5cbH4">reference video</a> aswell.</p> <ul> <li>A translucent unlit material was chosen for the wind particles.</li> <li>The emissive color was made to be driven by the particle color.</li> <li>The opacity was controlled by the multiplication of the alpha value of the particle with a RadialGradientExponential to introduce a smooth gradient fall-off that would make the wind look natural.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/WindMat-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/WindMat-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/WindMat-1400.webp"/> <img src="/assets/img/WindMat.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="43-wind-particles">4.3 Wind Particles</h4> <ul> <li>A new Cascade particle system is created and the rendering for the default emitter is turned off.</li> <li>The particle is given random horizontal velocity with minor deviations in other directions.</li> <li>An emitter for trails is added and it’s made to follow the first emitter and spawn alongside it.</li> <li>The wind material created earlier is added to the trail emitter.</li> <li>The scale is made to represent a long trail.</li> <li>The direction of velocity is made to ribbon over its lifetime to make the trail follow a wave-like pattern.</li> <li>The particles are made to spawn around a sphere with controllable radius to control the spread.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/WindPart.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/WindPart.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/WindPart.gif-1400.webp"/> <img src="/assets/img/WindPart.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="44-fog-texture">4.4 Fog Texture</h4> <ul> <li>A smooth noise texture (obtained online) was used as the fog texture for smooth light absorption (extinction).</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FogTex-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FogTex-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FogTex-1400.webp"/> <img src="/assets/img/FogTex.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="45-fog-material">4.5 Fog Material</h4> <ul> <li>A volume-based material with additive blending is created for the fog to be volumetric.</li> <li>A sphere mask between world and particle position with particle radius as the mask’s radius is used to control the rate of light absorption (extinction) of the material.</li> <li>The mask is parametrically controlled by a hardness and extinction value multiplied by RGB value of the texture I obtained earlier.</li> <li>The albedo of the material takes in the mutiplication of the sphere mask and the blend overlay between our texture and a RGB value parameter which we can control in the instance of that material.</li> <li>Thus we can control the hardness, light absorption rate and the color of the fog.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FogMat-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FogMat-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FogMat-1400.webp"/> <img src="/assets/img/FogMat.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="46-fog-particle">4.6 Fog Particle</h4> <ul> <li>A new Cascade particle system is created and an instance of the fog material is assigned to it.</li> <li>The particle is scaled only along the X-axis &amp; Z-axis to represent a flat surface and its velocity is set to zero.</li> <li>This particle needs to be paired with an exponential height fog (with volumetric fog enabled) to render over the screen.</li> <li>The particles are spawned around a cylinder (having zero thickness) with its flat edge in the X-Z plane.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FogEH.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FogEH.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FogEH.gif-1400.webp"/> <img src="/assets/img/FogEH.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Fog Extinction &amp; Hardness </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/FogCol.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/FogCol.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/FogCol.gif-1400.webp"/> <img src="/assets/img/FogCol.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Fog Color </div> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SnowStormFinal.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SnowStormFinal.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SnowStormFinal.gif-1400.webp"/> <img src="/assets/img/SnowStormFinal.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Finally the snow niagara system, wind cascade system, fog cascade system &amp; an exponential height fog (with volumetric fog enabled) are added into a single blueprint actor to be used in the yard scene as a snowstorm system. </div> <h4 id="50-cable-system">5.0 Cable system</h4> <p>My next task was to come up with a physics-based cable system that was mostly to be used for cosmetic purposes in the game.</p> <h4 id="51-cable-actors">5.1 Cable Actors</h4> <p>Fortunately, Unreal comes preloaded with cable actors with rope physics for on-the-go usage.</p> <ul> <li>These cables implement the traditional way for rope physics i.e. using a series of particles with motion constraints between them.</li> <li>The texture maps were obtained from the Quixel Megascans.</li> <li>The physics is constrained between objects that the cable is attached to them by using Physics constraint actor between the two objects.</li> <li>Cable’s end is attached to any one of the objects.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Cable.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Cable.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Cable.gif-1400.webp"/> <img src="/assets/img/Cable.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="60-glowing-crack-material">6.0 Glowing Crack Material</h4> <p>The team then assigned me the task to come up with materials with glowing cracks. They provided me with <a href="https://assetstore.unity.com/packages/vfx/particles/spells/mesh-effects-67803#description">references</a> aswell.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/gcrackref-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/gcrackref-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/gcrackref-1400.webp"/> <img src="/assets/img/gcrackref.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="61-crack-textures">6.1 Crack textures</h4> <ul> <li>As the reference for the material that I was provided with was a Unity asset, I tried reverse engineering the properties of the material to recreate it in Unreal.</li> <li>I could make out that a single color channel of the base map (Albedo) was inverted and clamped between 0 and 1 and was multiplied with the emissivity input for the material.</li> <li>The single channel input texture ensured that the light emitted took greyscale values according to the base map and we could control the intensity, rate, color tint, etc through the emissivity input.</li> <li>A normal map was also used to add depth information to the cracks to make them look more realistic.</li> <li>So I imported a non-uniform galvanized metal’s texture maps (base &amp; normal) from the Quixel Bridge for this purpose.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/CrackBase-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/CrackBase-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/CrackBase-1400.webp"/> <img src="/assets/img/CrackBase.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Base Map </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/CrackNormal-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/CrackNormal-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/CrackNormal-1400.webp"/> <img src="/assets/img/CrackNormal.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Normal Map </div> </div> </div> <h4 id="62-emission-parameters">6.2 Emission Parameters</h4> <ul> <li>The emissive color parameter of the material is governed by a time-dependent sine wave that leads to pulsating behavior by the glowing cracks.</li> <li>The sine input is given a <code class="language-plaintext highlighter-rouge">Rate</code> factor as its frequency, to control the rate of pulsation.</li> <li>Then the wave is given an offset governed by the <code class="language-plaintext highlighter-rouge">Pulse Intensity</code>. Its value is preferably kept to be greater than one to avoid negative waves (this prevents lag between the pulse cycles).</li> <li>The offseted wave function is amplified by a <code class="language-plaintext highlighter-rouge">Glow Intensity</code> factor to control the amplitude of the glow.</li> <li>Finally the entire amplified function is multiplied by an <code class="language-plaintext highlighter-rouge">Emissive Color</code> Vector parameter which governs the color of the glow.</li> <li>The <code class="language-plaintext highlighter-rouge">Rate, Pulse Intensity, Glow Intensity, Emissive Color</code> are parametrically exposed to be controlled by the instance of that material.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/EmissionParameter-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/EmissionParameter-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/EmissionParameter-1400.webp"/> <img src="/assets/img/EmissionParameter.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="63-emission-shape">6.3 Emission Shape</h4> <ul> <li>The base color of the material is governed by the base map of texture and a <code class="language-plaintext highlighter-rouge">Base Tint</code> Vector factor.</li> <li>The base map is blend overlayed with the <code class="language-plaintext highlighter-rouge">Base Tint</code> as the base. This ensures that whenever the blend is greater than half the grey value, it will get screened else it will get multiplied. (Every blend option was tried and the Overlay type was found to be best suited for our purpose).</li> <li>The final blend output is multiplied again with the base map and assigned to the base color of the material.</li> <li>The normal map is assigned as the material’s normal as it is.</li> <li>The shape of the emission is governed by a single color channel of the base map (all three were tried and the Red channel felt the most appealing to the eyes).</li> <li>The color input is inverted using 1-x node and it is assigned a <code class="language-plaintext highlighter-rouge">Coverage</code> parameter as the exponent.</li> <li>The value is clamped between 0 and 1 and is multiplied by amplified function obtained above and finally assigned to the emissive color property of the material.</li> <li>The <code class="language-plaintext highlighter-rouge">Base Tint &amp; Coverage</code> are parametrically exposed to be controlled by the instance of that material.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/EmissionShape-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/EmissionShape-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/EmissionShape-1400.webp"/> <img src="/assets/img/EmissionShape.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>A material instance of this material was created and assigned to one of the items in the game.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Coverage.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Coverage.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Coverage.gif-1400.webp"/> <img src="/assets/img/Coverage.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Changing Coverage </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/GlowIntensity.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/GlowIntensity.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/GlowIntensity.gif-1400.webp"/> <img src="/assets/img/GlowIntensity.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Changing Glow Intensity </div> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/PulseIntensity.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/PulseIntensity.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/PulseIntensity.gif-1400.webp"/> <img src="/assets/img/PulseIntensity.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Changing Pulse Intensity </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Rate.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Rate.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Rate.gif-1400.webp"/> <img src="/assets/img/Rate.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Changing Rate </div> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/EmissiveColor.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/EmissiveColor.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/EmissiveColor.gif-1400.webp"/> <img src="/assets/img/EmissiveColor.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Changing Emissive Color </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/BaseTint.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/BaseTint.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/BaseTint.gif-1400.webp"/> <img src="/assets/img/BaseTint.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Changing Base Tint </div> </div> </div> <h4 id="70-loading-screen">7.0 Loading Screen</h4> <p>I decided to switch my role to explore the track of a tech designer. I was assigned the task to design a loading screen for the various scene transitions in the game.</p> <h4 id="70-widget">7.0 Widget</h4> <ul> <li>A 16:9 widget was created to serve as the lock screen.</li> <li>A <a href="https://drive.google.com/file/d/1AEvD9Qi2J3TZTnRo6RIspSqx6nZX-jSQ/view">video</a> was provided to be used as the background for the lock screen.</li> <li>Since Unreal Engine doesn’t support Video files for Widget as is, I had to do a walkaround. I imported the video as a media player and created a video texture out of it. Then I created a material with UI domain that could be used in the widget as an Image. (Image in widgets support the use of materials as a brush)</li> <li>The video was looped and precached to avoid any frame drops in between each loop.</li> <li>The default Rendering Hardware Interface was changed to DirectX11 as Vulkan/DirectX12 eventually failed to cache the video and led to a black screen.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/loadscrmat.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/loadscrmat.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/loadscrmat.gif-1400.webp"/> <img src="/assets/img/loadscrmat.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Video UI Material </div> <h4 id="71-progress-bar">7.1 Progress Bar</h4> <p>The team wanted me to implement a progress bar whose colors can be controlled by us in the engine. Apart from this the progress bar’s progress was to be linked with the amount of level content and lighting information was loaded in the level.</p> <ul> <li>I used the Progress Bar prefab provided by the Unreal Engine in the Widget Palette as the base.</li> <li>The progress percentage was bound with the <code class="language-plaintext highlighter-rouge">GetAsyncLoadPercentage</code> with an upper clamp on the timing.</li> <li>A custom sprite was used for the progress bar aswell.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/progressbarbp-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/progressbarbp-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/progressbarbp-1400.webp"/> <img src="/assets/img/progressbarbp.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="72-tips-system">7.2 Tips System</h4> <p>Next we decided upon implementing a tips system that would show up random tips on the widget while the level is loading.</p> <ul> <li>A semi transparent black box was used as the container for the textbox of the tips that would come randomly.</li> <li>DCC font was used for the text to keep it seamless with the game.</li> <li>The text was randomly chosen from an array of strings and was set to switch to another string after a threshold time.</li> <li>The sound designers even went on to implement a narration system that read out the tips that came out on the screen.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/tipbp-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/tipbp-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/tipbp-1400.webp"/> <img src="/assets/img/tipbp.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="73-widget--level-blueprint">7.3 Widget &amp; Level Blueprint</h4> <ul> <li>The widget was added to the viewport of the screen when a new level was opened.</li> <li>It was made to wait for <code class="language-plaintext highlighter-rouge">GetAsyncLoadPercentage</code> to get to 100 and then a prompt was shown to press any key (cross-platform) to disable the widget and open the newly loaded level. The blueprint was made to wait for a threshold time in case the level took too long to load.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/lswidget-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/lswidget-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/lswidget-1400.webp"/> <img src="/assets/img/lswidget.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="74-final-touches">7.4 Final Touches</h4> <ul> <li>All the widgets and elements were animated To give a more professional look.</li> <li>The game’s logo was added in the center and was made to fade into a text prompt that asked the players to press a key to continue once the level had been loaded.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/LoadingScreen.gif-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/LoadingScreen.gif-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/LoadingScreen.gif-1400.webp"/> <img src="/assets/img/LoadingScreen.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="blog"/><category term="unrealengine4"/><category term="fiea"/><category term="soulshard"/><summary type="html"><![CDATA[documentation & logs of work done on Soul Shard at FIEA!]]></summary></entry><entry><title type="html">DES 499 - Jantar Mantar Reconstruction</title><link href="https://alfolio.github.io/docs/2022/jantar-mantar/" rel="alternate" type="text/html" title="DES 499 - Jantar Mantar Reconstruction"/><published>2022-11-14T10:30:00+00:00</published><updated>2022-11-14T10:30:00+00:00</updated><id>https://alfolio.github.io/docs/2022/jantar-mantar</id><content type="html" xml:base="https://alfolio.github.io/docs/2022/jantar-mantar/"><![CDATA[<p>As a part of this project course we’re expected to create a physically precise interactive model of the various yantras at <a href="https://www.jantarmantar.org/">Jantar Mantar</a> in Unity. This project is being mentored by <a href="https://iitgn.ac.in/faculty/design/sameer">Sameer Sahasrabudhe</a>.</p> <ul> <li>The report for the work done on this project in Sem 1 [AY 2022-23] can be found <a href="/assets/pdf/Aniket_Progyan_FasterThanNERFs.pdf">here</a>.</li> <li>All other deliverables can be found <a href="https://makra.wtf/docs/2022/cs499-pastebin/">here</a>.</li> </ul> <h4 id="10-week---1">1.0 Week - 1</h4> <p>In the first week we were mostly expected to collect reference materials online as well as start working upon rough models of few of the Yantars (need not be physically accurate).</p> <h4 id="11-reference-materials">1.1 Reference Materials</h4> <ul> <li>We collected a lot of Reference Materials and listed them <a href="https://docs.google.com/document/d/1l8tKDSJfwaVZQedeRZSi7APF9uCLk7THDPQUlbR4L1Q/edit?usp=sharing">here</a>.</li> <li>Although, we couldn’t find any document that depicted the exact dimensions of Jantar Mantar, but we did find a <a href="https://www.jantarmantar.org/resources/Projects/SY-Model/Samrat-Yantra-Model-Templates.pdf">website</a> containing the paper model replica of jantar mantar.</li> </ul> <h4 id="12-3d-models">1.2 3D Models</h4> <ul> <li>Then we created rough models of the <a href="https://www.jantarmantar.org/learn/observatories/instruments/samrat/index.html">Samrat Yantra</a> in Blender based on the resources we could procure.</li> <li>As the model didn’t take CAD dimensions into account, it sure had some flaws that were pointed by Sameer Sir in our weekly meetings. Especially the fact that the base model wasn’t symmetrical from both the sides.</li> <li>We were later expected to come up with dimensionally accurate models based on CAD and paper model replicas that we found</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SamratYantraRough-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SamratYantraRough-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SamratYantraRough-1400.webp"/> <img src="/assets/img/SamratYantraRough.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Error1_SamratYantra-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Error1_SamratYantra-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Error1_SamratYantra-1400.webp"/> <img src="/assets/img/Error1_SamratYantra.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Left Side - Base </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Error2_SamratYantra-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Error2_SamratYantra-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Error2_SamratYantra-1400.webp"/> <img src="/assets/img/Error2_SamratYantra.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Right Side - Base </div> </div> </div> <div class="caption"> Not Symmetrical </div> <h4 id="13-day--night-cycles">1.3 Day &amp; Night Cycles</h4> <p>My job was to script the day &amp; night cycles in Unity (need not be physically precise initially).</p> <ul> <li>I used a Procedural Sky shader for skybox as it comes with a sun that mimics the directional light by default.</li> <li>Then I bound the directional light’s rotation and intensity, fog color and a clock to the day &amp; night cycle.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/day_night.mp4" type="video/mp4"/> </video> </div> </div> <h4 id="20-week---2">2.0 Week - 2</h4> <p>In the next week we were assigned the task to come up with labelled Jantar Mantar Engineering Drawings, paper prototype and 3D models of Jantar Mantar that we obtained online and adding a rough sundial model in Unity to check if the shadows casted by the day &amp; night cycle are working properly.</p> <h4 id="21-precision-cad-modelling">2.1 Precision CAD modelling</h4> <ul> <li>We were suggested to make accurate CAD model from any random CAD design to learn precision CAD modelling.</li> <li>The blend file can be found <a href="assets/../../assets/misc/Perc.blend">here</a>.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/CAD_Design-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/CAD_Design-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/CAD_Design-1400.webp"/> <img src="/assets/img/CAD_Design.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> CAD Design </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Model_Render-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Model_Render-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Model_Render-1400.webp"/> <img src="/assets/img/Model_Render.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Model Render </div> </div> </div> <h4 id="22-labelling-of-engineering-drawings">2.2 Labelling of Engineering Drawings</h4> <ul> <li>All the engineering drawings were labeled to make their assembly (for 3D model and paper prototype) easier.</li> <li>As we didn’t have a lot of dimensionally accurate references for the Samrat Yantra, so we used online references to manually label each of them individually first and then come up with a rough idea how the model and paper model was to be assembled.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Label-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Label-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Label-1400.webp"/> <img src="/assets/img/Label.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="23-making-of-paper-prototype">2.3 Making of Paper Prototype</h4> <ul> <li>The engineering drawings after analysis and labelling were converted into a paper prototype for us to visualize.</li> <li>The process was fairly simple as these engineering drawings were originally meant for paper prototyping itself. So we had to cut and glue them accordingly.</li> <li>The prototypes were dimensionally accurate and represented a scaled down model of Samrat Yantra.</li> <li>As the paper was quite thin, the model wasn’t structurally intact.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Cut-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Cut-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Cut-1400.webp"/> <img src="/assets/img/Cut.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="24-shadows-in-unity">2.4 Shadows in Unity</h4> <ul> <li>I decided to use a cylinder model to simulate how the sun would cast its shadows on a full day and night cycle.</li> <li>The shadows depicted linear movement (motion on a straight line), unlike the sundial, which roughly works like a clock, and the dial rotates in a clockwise fashion.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/shadow_day_night.mp4" type="video/mp4"/> </video> </div> </div> <h4 id="25-recreating-paper-prototype-in-blender">2.5 Recreating paper prototype in Blender</h4> <ul> <li>Using the drawings and dimensions in paper prototype we created the parts of Samrat Yantra.</li> <li>As we created each part individually and later scaled them back, the final model was not in proportion.</li> <li>The problem was then solved using accurate dimensions calculated from the pdf.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/251-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/251-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/251-1400.webp"/> <img src="/assets/img/251.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/252-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/252-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/252-1400.webp"/> <img src="/assets/img/252.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/253-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/253-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/253-1400.webp"/> <img src="/assets/img/253.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="30-week---3">3.0 Week - 3</h4> <p>In this week we were expected to start working the UX that our project had to offer.</p> <ul> <li>For this we were expected to give the day/night cycle and camera controls to the user as well as allow the user to input any time to check the shadow configuration at that time.</li> <li>We also decided to replace the existing cylinder that depicted the sundial with an actual sundial model along with proper sundial markings.</li> <li>Some people began working on the game’s UI as well.</li> </ul> <h4 id="31-sundial-model">3.1 Sundial Model</h4> <ul> <li>A sundial was modeled based on refrence dimensions that we obtained online.</li> <li>It was quite surprising to see that the shadows were rotating perfectly just due to the shape of the dial while keeping the rotation pattern of the sun same as before.</li> <li>Add cyl vs sundial and model img here.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Sundial-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Sundial-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Sundial-1400.webp"/> <img src="/assets/img/Sundial.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/shadow_day_night.mp4" type="video/mp4"/> </video> <div class="caption"> Old Design - Less Physical Accuracy </div> </div> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/accurate_day_night.mp4" type="video/mp4"/> </video> <div class="caption"> New Design - More Physical Accuracy </div> </div> </div> <h4 id="32-daynight-cycle--camera-controls">3.2 Day/Night Cycle &amp; Camera Controls</h4> <ul> <li>Unity’s default input system was used to take the input of the players.</li> <li>The horizontal axis was assigned to the rotation of the camera whereas the vertical axis was kept responsible for the day/night cycle.</li> <li>A dedicated prompt was shown on the screen to inform the users about the same.</li> </ul> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/user_control.mp4" type="video/mp4"/> </video> <h4 id="33-custom-time-input">3.3 Custom Time Input</h4> <ul> <li>I used the Text Mesh Pro input box to take inputs from the user.</li> <li>I limited each text box to take 2-digit integer inputs (HH &amp; MM format).</li> <li>This value was used to assign a custom time value that users could input to check the behavior of the sundial at that particular time.</li> </ul> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/time_day_night.mp4" type="video/mp4"/> </video> <h4 id="40-week-4">4.0 Week-4</h4> <p>In this week we worked upon the UI &amp; UX.</p> <h4 id="41-designing-the-ui">4.1 Designing the UI</h4> <ul> <li>The UI for the project was designed using Figma.</li> <li>The icons were given a contrasting color with respect to the black and blue sky hue and they were provided with a drop shadow as well.</li> <li>The edges were kept rounded to give it a material look.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/figma_sundial-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/figma_sundial-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/figma_sundial-1400.webp"/> <img src="/assets/img/figma_sundial.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="42-implementing-the-ui-in-project">4.2 Implementing the UI in project</h4> <ul> <li>The UI was implemented over the canvas component provided by Unity to replace keyboard inputs with Touch/Click inputs. It Included- <ul> <li>A Start/Stop Button</li> <li>A Slider</li> <li>A Left/Right Button</li> <li>A Forward/Backward button</li> </ul> </li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/UI_Sundial-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/UI_Sundial-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/UI_Sundial-1400.webp"/> <img src="/assets/img/UI_Sundial.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>The Start/Stop button was used to play and pause the simulation.</li> <li>The Slider was used to rotate the camera angle (with step wise increment/decrement aided by the Left/Right button).</li> <li>The Forward/Backward button used to speed up or reverse the process.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/start_stop_btn.mp4" type="video/mp4"/> </video> <div class="caption"> Start/Stop Button </div> </div> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/slider.mp4" type="video/mp4"/> </video> <div class="caption"> Slider </div> </div> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/fwd_bwd_btn.mp4" type="video/mp4"/> </video> <div class="caption"> Forward/Backward button </div> </div> </div> <h4 id="50-week-5">5.0 Week-5</h4> <p>In this week, we began working upon the login system.</p> <h4 id="51-home--sign-up-page">5.1 Home &amp; Sign Up Page</h4> <ul> <li>Created a menu for selecting the yantra user wants to explore.</li> <li>Created icons for selecting the yantra user wants to explore.</li> <li>A <code class="language-plaintext highlighter-rouge">sign-up</code> Page opens user selects a yantra.</li> <li>The <code class="language-plaintext highlighter-rouge">home.html</code> page consists of containers, each representing a yantra having a class <code class="language-plaintext highlighter-rouge">product-container</code>, with reference to <code class="language-plaintext highlighter-rouge">login.html</code>.</li> <li>The webpage requires one-time signup.</li> <li>The orientation of the <code class="language-plaintext highlighter-rouge">login.html</code> page is styled using css.</li> <li>Js script with an event listener is linked to signup element.</li> <li>The event listener sends data using POST request to the google sheet.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/icons-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/icons-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/icons-1400.webp"/> <img src="/assets/img/icons.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Yantra Selection Menu </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/signup_page-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/signup_page-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/signup_page-1400.webp"/> <img src="/assets/img/signup_page.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Sign Up Menu </div> </div> </div> <h4 id="52-login-information">5.2 Login Information</h4> <ul> <li>The login details of users are stored in a google sheet.</li> <li>In further iterations the details will be stored in a database.</li> <li>The database will also be used for saving user preferences such as, camera and lightning setups.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/login_info-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/login_info-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/login_info-1400.webp"/> <img src="/assets/img/login_info.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="60-week-6">6.0 Week-6</h4> <p>In this week, we were expected to convert the Unity project into a web-based experience and integrate it with the our SignUp page. Apart from this, we were also expected to come up with precise models of the Yantras and integrate them within our project.</p> <h4 id="61-exporting-the-project-to-web">6.1 Exporting the Project to Web</h4> <ul> <li>The Unity project was optimized and revamped to be exported to the Web as a WebGL experience.</li> <li>The project was hosted online using Github Pages and can be accessed <a href="https://aryamanntomar.github.io/DES499-WebPage/">here</a>.</li> <li>All compressions on the build were disabled and they generally raise conflicts while getting decompressed on the Jekyll framework that GitHub Pages use.</li> <li>Code was optimized to give preference to speed over size in the final build.</li> <li>The homepage was renamed to <code class="language-plaintext highlighter-rouge">index.html</code> (naming convention for homepages on Github Pages).</li> <li>The yantras were linked to the <code class="language-plaintext highlighter-rouge">jantar-mantar-experience.html</code> in our build.</li> <li>We further plan to use Firebase Authentication to only provide private sessions to the users who Sign Up for the experience.</li> </ul> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/WebGLExp.mp4" type="video/mp4"/> </video> <h4 id="62-precise-models-of-the-yantras">6.2 Precise models of the Yantras</h4> <ul> <li>First, the dimensions of the model were calculated by Ajitesh.</li> <li>The base of the model was made by Shubham using the dimensions provided by Ajitesh.</li> <li>After referring to the <a href="https://www.jantarmantar.org/resources/Projects/SY-Model/Samrat-Yantra-Model-Templates.pdf">PDF</a> provided by sir, we found difficulty in coming up with precise models of the block.</li> <li>We tried certain adjustments, scaling and fitting the side block on the base of the yantra.</li> <li>The curves of the yantras was quite difficult to make, due to its precision levels.</li> <li>We made the curve long enough to pass through the pyramid of the yantra while maintaining the precision standards of our model after multiple adjustments (even though they were not precise in the <a href="https://www.jantarmantar.org/resources/Projects/SY-Model/Samrat-Yantra-Model-Templates.pdf">PDF</a> itself)</li> <li>The center pyramids along with the staircase was similarly designed using the iterative adjustment process mentioned above.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/PM1-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/PM1-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/PM1-1400.webp"/> <img src="/assets/img/PM1.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The Curves </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/PM2-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/PM2-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/PM2-1400.webp"/> <img src="/assets/img/PM2.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The Center Pyramid </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/PM3-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/PM3-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/PM3-1400.webp"/> <img src="/assets/img/PM3.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The Base with Side Blocks </div> </div> </div>]]></content><author><name></name></author><category term="blog"/><category term="unity3d"/><category term="jantarmantar"/><category term="design"/><summary type="html"><![CDATA[documentation & logs of work done on Jantar Mantar Reconstruction as a part of DES499 Project Course!]]></summary></entry><entry><title type="html">SDFNet - Boring 2D Flat images to fast-rendered 3D</title><link href="https://alfolio.github.io/docs/2022/sdfnet/" rel="alternate" type="text/html" title="SDFNet - Boring 2D Flat images to fast-rendered 3D"/><published>2022-11-14T09:00:00+00:00</published><updated>2022-11-14T09:00:00+00:00</updated><id>https://alfolio.github.io/docs/2022/sdfnet</id><content type="html" xml:base="https://alfolio.github.io/docs/2022/sdfnet/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/sdfnet-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/sdfnet-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/sdfnet-1400.webp"/> <img src="/assets/img/sdfnet.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>SDFNet aims to go from boring flat, 2D images to less boring Signed Distance Functions for representing them in 3D, for simple, symmetric shapes. It uses Neural Radiance Fields (NeRFs) and Constructive Solid Geometry to go from images to 3D objects, to SDFs for the shapes.</p> <ul> <li>The report for the work done on this project in Sem 1 [AY 2022-23] can be found <a href="https://makra.wtf/assets/pdf/Aniket_Progyan_FasterThanNERFs.pdf">here</a>.</li> <li>All other deliverables can be found <a href="https://makra.wtf/docs/2022/cs499-pastebin/">here</a>.</li> </ul> <p>We’re deeply referencing the code accompanying the paper: <a href="https://arxiv.org/abs/1712.08290">CSGNet: Neural Shape Parser for Constructive Solid Geometry, CVPR 2018</a>. Also referenced is the paper on Neural Radiance Fields, whose code can be found <a href="https://github.com/bmild/nerf">here</a>.</p> <h4 id="week---1">Week - 1</h4> <ol> <li>Discussed and formulated a brief plan of action and direction we would like the project to head to.</li> <li>Concluded on working initially towards two directions- <ul> <li>3D reconstruction of objects from their 2D images</li> <li>Improved implementation of Neural Rendering.</li> </ul> </li> </ol> <h4 id="week---2">Week - 2</h4> <ol> <li>Identified and collected previous research work like <a href="https://hippogriff.github.io/CSGNet/">CSGNet</a> and <a href="https://nywang16.github.io/p2m/index.html">Pixel2Mesh</a> in the domains.</li> <li>Formulated the Problem Statement - Improving CSGNet by adding more shape information, introducing color reconstruction, and creating a 2D image to 3D mesh pipeline.</li> <li>Began the Iteration One of reconstruction of the 3D model of a bottle. This was integral in helping us understand the nitty gritty of and the subtle details that were missed in mere discussions and research overview.</li> <li>Continued research work on the papers of Neural Rendering and Constructive Solid Geometry.</li> </ol> <h4 id="week---3">Week - 3</h4> <ol> <li>Created a <a href="https://drive.google.com/drive/folders/1QhGyF3J2KmQ43NiDzePNF9ne_9iHSgRk">dataset</a> using blender, developed the <a href="https://colab.research.google.com/drive/1HBpZzwO55UoJX1YpubzkLNc-pvD0C2Th?ts=62eb973a">model</a> to predict the required dimensions from a 2D image. As the first iteration, although the results being sub-par (with a MSE ~16), it helped us identify the next direction to move forward, ie, we needed some method to extract the 3D information from the images before feeding it to the Neural Network.</li> <li>Created a <a href="https://github.com/aniketrajnish/CS499-SDFNet">repo</a> to collaborate.</li> <li>We began analyzing papers such as Pixel2Mesh for the above problem.</li> <li>Continued reseach work on the papers of Neural Rendering.</li> </ol> <h4 id="week---4">Week - 4</h4> <ol> <li>Implemented a SDF Renderer (built ground-up in Unity) to reconstruct images from the data provided by the first iteration model.</li> <li>Identified new directions to progress, one being Pixel to Mesh followed by reconstruction using CSGNet, while also looking to explore the possibility of using the function within Neural Radiance Field for 3D reconstruction.</li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/bottle_dataset.mp4" type="video/mp4"/> </video> <div class="caption"> Blender Dataset </div> </div> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/bottle_sdf.mp4" type="video/mp4"/> </video> <div class="caption"> Rendered using the SDF Renderer </div> </div> </div> <ul> <li>We stopped updating blogs for past couple of months, but we’ll update them soon. Meanwhile you can find the report containing details of all the work done <a href="https://makra.wtf/assets/pdf/Aniket_Progyan_FasterThanNERFs.pdf">here</a>.</li> <li>Also, this is poster for the same:</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/SDFNET_POSTER-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/SDFNET_POSTER-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/SDFNET_POSTER-1400.webp"/> <img src="/assets/img/SDFNET_POSTER.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="example image" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="contact">Contact</h3> <p>To ask questions, please email any one of us: <a href="mailto:aniket.r@iitgn.ac.in">Aniket</a>, <a href="mailto:dhyey.thummar@iitgn.ac.in">Dhyey</a>, <a href="mailto:progyan.das@iitgn.ac.in">Progyan</a> and <a href="mailto:shruhrid.banthia@iitgn.ac.in">Shruhrid</a>.</p>]]></content><author><name></name></author><category term="blog"/><category term="sdf"/><category term="csg"/><category term="nerf"/><category term="raymarching"/><summary type="html"><![CDATA[documentation & logs of work done on SDFNet as a part of CS499 Project Course!]]></summary></entry><entry><title type="html">DES 391-1 War Game</title><link href="https://alfolio.github.io/docs/2022/war-game/" rel="alternate" type="text/html" title="DES 391-1 War Game"/><published>2022-11-12T11:00:00+00:00</published><updated>2022-11-12T11:00:00+00:00</updated><id>https://alfolio.github.io/docs/2022/war-game</id><content type="html" xml:base="https://alfolio.github.io/docs/2022/war-game/"><![CDATA[<h4 id="10-general-info">1.0 General Info</h4> <ul> <li>The game will be made using <a href="https://twinery.org/">Twine</a> and will be hosted using <a href="https://pages.github.com/">Github Pages</a>.</li> <li>The game would be a choice-based text-only HTLM5 game.</li> <li>People would find themselves admist a war situation</li> <li>They would be given with constant choices like looking for inventory or helping an ally.</li> <li>Correct set of choices and wise decision making would add up on your points and help you win.</li> <li>Carelessly choosen options would decrease your points and you’d eventually lose the war.</li> </ul> <h4 id="20-deliverables">2.0 Deliverables</h4> <ul> <li>You can play the game <a href="https://aniketrajnish.github.io/DES-391-1-War-Game-Assignment/">here</a>.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <video class="video-fluid rounded z-depth-1" autoplay="" muted="" loop=""> <source src="../../../assets/img/Gameplay_TW.mp4" type="video/mp4"/> </video> </div> </div> <div class="caption"> Gameplay </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/Twine_SC-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/Twine_SC-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/Twine_SC-1400.webp"/> <img src="/assets/img/Twine_SC.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="All Pixel Arts" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> The Twine Source Code </div>]]></content><author><name></name></author><category term="blog"/><category term="twine"/><category term="war-game"/><summary type="html"><![CDATA[documentation of rules & logs of work done on DES 391-1 Modding Assignment]]></summary></entry><entry><title type="html">CS 499 pastebin</title><link href="https://alfolio.github.io/docs/2022/cs499-pastebin/" rel="alternate" type="text/html" title="CS 499 pastebin"/><published>2022-11-11T11:00:00+00:00</published><updated>2022-11-11T11:00:00+00:00</updated><id>https://alfolio.github.io/docs/2022/cs499-pastebin</id><content type="html" xml:base="https://alfolio.github.io/docs/2022/cs499-pastebin/"><![CDATA[<ul> <li><a href="/assets/pdf/Aniket_Progyan_FasterThanNERFs.pdf">Project Report</a></li> <li><a href="https://makra.wtf/docs/2022/sdfnet/">Blog</a></li> <li><a href="/assets/img/SDFNET_POSTER.png">Poster</a></li> <li>Repository [<a href="https://github.com/aniketrajnish/CS499-SDFNet/tree/main/Notebooks">Notebooks</a>/<a href="https://github.com/aniketrajnish/CS499-SDFNet/tree/main/Renderer">Renderer</a>]</li> <li><a href="https://colab.research.google.com/drive/1HBpZzwO55UoJX1YpubzkLNc-pvD0C2Th">Colab Notebook</a></li> <li><a href="https://drive.google.com/drive/folders/1QhGyF3J2KmQ43NiDzePNF9ne_9iHSgRk">Dataset</a></li> </ul>]]></content><author><name></name></author><category term="blog"/><category term="unity3d"/><category term="jantarmantar"/><category term="design"/><summary type="html"><![CDATA[this blog contains all the relevant links for the CS 499 (SDFNet) course.]]></summary></entry><entry><title type="html">DES 391-1 pastebin</title><link href="https://alfolio.github.io/docs/2022/des391-1-pastebin/" rel="alternate" type="text/html" title="DES 391-1 pastebin"/><published>2022-11-11T11:00:00+00:00</published><updated>2022-11-11T11:00:00+00:00</updated><id>https://alfolio.github.io/docs/2022/des391-1-pastebin</id><content type="html" xml:base="https://alfolio.github.io/docs/2022/des391-1-pastebin/"><![CDATA[<ul> <li>Modding Assignment [<a href="https://tabletopia.com/players/id1929536/19qb8n/play">Build</a>/<a href="https://github.com/aniketrajnish/DES391-1-ModdingAssignment/blob/main/files/game.pdf">Assets</a>/<a href="https://makra.wtf/docs/2022/modding/">Blog</a>/<a href="https://github.com/aniketrajnish/DES391-1-ModdingAssignment">Repo</a>]</li> <li>Sandbox Assignment [<a href="https://aniketrajnish.github.io/DES-391-1-Sandbox-Assignment/">Build</a>/<a href="https://github.com/aniketrajnish/DES-391-1-Sandbox-Assignment">Repo</a>]</li> <li>Speculation Assignment [<a href="https://aniketrajnish.github.io/DES-391-1-Speculation-Assignment/">Build</a>/<a href="https://github.com/aniketrajnish/DES-391-1-Speculation-Assignment">Repo</a>]</li> <li>Corridor Game [<a href="https://makra.wtf/assets/img/Corridor_Concept.jpeg">Concept</a>]</li> <li>War Game [<a href="https://aniketrajnish.github.io/DES-391-1-War-Game-Assignment/">Build</a>/<a href="https://makra.wtf/docs/2022/war-game/">Blog</a>/<a href="https://github.com/aniketrajnish/DES-391-1-War-Game-Assignment">Repo</a>]</li> </ul>]]></content><author><name></name></author><category term="blog"/><category term="twine"/><category term="unity"/><category term="gamedev"/><summary type="html"><![CDATA[this blog contains all the assignments and projects delivered for the DES 391-1 (On the Possibility of Board Games) course.]]></summary></entry></feed>